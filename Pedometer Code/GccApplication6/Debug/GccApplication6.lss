
GccApplication6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001f6  00800100  00000e16  00000eaa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  008002f6  008002f6  000010a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027e1  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e70  00000000  00000000  00003ad9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013e4  00000000  00000000  00004949  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005b4  00000000  00000000  00005d30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009fd  00000000  00000000  000062e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ee6  00000000  00000000  00006ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00008bc7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 02 01 	jmp	0x204	; 0x204 <__ctors_end>
   4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  68:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  70:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b4:	13 05       	cpc	r17, r3
  b6:	1a 05       	cpc	r17, r10
  b8:	1a 05       	cpc	r17, r10
  ba:	1a 05       	cpc	r17, r10
  bc:	1a 05       	cpc	r17, r10
  be:	1a 05       	cpc	r17, r10
  c0:	1a 05       	cpc	r17, r10
  c2:	1a 05       	cpc	r17, r10
  c4:	1a 05       	cpc	r17, r10
  c6:	1a 05       	cpc	r17, r10
  c8:	1a 05       	cpc	r17, r10
  ca:	1a 05       	cpc	r17, r10
  cc:	1a 05       	cpc	r17, r10
  ce:	1a 05       	cpc	r17, r10
  d0:	1a 05       	cpc	r17, r10
  d2:	1a 05       	cpc	r17, r10
  d4:	1a 05       	cpc	r17, r10
  d6:	1a 05       	cpc	r17, r10
  d8:	1a 05       	cpc	r17, r10
  da:	1a 05       	cpc	r17, r10
  dc:	1a 05       	cpc	r17, r10
  de:	1a 05       	cpc	r17, r10
  e0:	1a 05       	cpc	r17, r10
  e2:	1a 05       	cpc	r17, r10
  e4:	1a 05       	cpc	r17, r10
  e6:	1a 05       	cpc	r17, r10
  e8:	1a 05       	cpc	r17, r10
  ea:	1a 05       	cpc	r17, r10
  ec:	1a 05       	cpc	r17, r10
  ee:	ed 04       	cpc	r14, r13
  f0:	65 04       	cpc	r6, r5
  f2:	88 04       	cpc	r8, r8
  f4:	1a 05       	cpc	r17, r10
  f6:	fd 04       	cpc	r15, r13
  f8:	1a 05       	cpc	r17, r10
  fa:	1a 05       	cpc	r17, r10
  fc:	1a 05       	cpc	r17, r10
  fe:	1a 05       	cpc	r17, r10
 100:	1a 05       	cpc	r17, r10
 102:	1a 05       	cpc	r17, r10
 104:	1a 05       	cpc	r17, r10
 106:	1a 05       	cpc	r17, r10
 108:	1a 05       	cpc	r17, r10
 10a:	1a 05       	cpc	r17, r10
 10c:	1a 05       	cpc	r17, r10
 10e:	1a 05       	cpc	r17, r10
 110:	08 05       	cpc	r16, r8
 112:	1a 05       	cpc	r17, r10
 114:	b3 04       	cpc	r11, r3
 116:	1a 05       	cpc	r17, r10
 118:	1a 05       	cpc	r17, r10
 11a:	cf 04       	cpc	r12, r15
 11c:	1a 05       	cpc	r17, r10
 11e:	1a 05       	cpc	r17, r10
 120:	1a 05       	cpc	r17, r10
 122:	1a 05       	cpc	r17, r10
 124:	1a 05       	cpc	r17, r10
 126:	1a 05       	cpc	r17, r10
 128:	1a 05       	cpc	r17, r10
 12a:	1a 05       	cpc	r17, r10
 12c:	1a 05       	cpc	r17, r10
 12e:	dd 04       	cpc	r13, r13
 130:	65 04       	cpc	r6, r5
 132:	70 04       	cpc	r7, r0
 134:	1a 05       	cpc	r17, r10
 136:	fd 04       	cpc	r15, r13
 138:	1a 05       	cpc	r17, r10
 13a:	1a 05       	cpc	r17, r10
 13c:	1a 05       	cpc	r17, r10
 13e:	1a 05       	cpc	r17, r10
 140:	1a 05       	cpc	r17, r10
 142:	1a 05       	cpc	r17, r10
 144:	1a 05       	cpc	r17, r10
 146:	1a 05       	cpc	r17, r10
 148:	1a 05       	cpc	r17, r10
 14a:	1a 05       	cpc	r17, r10
 14c:	1a 05       	cpc	r17, r10
 14e:	1a 05       	cpc	r17, r10
 150:	08 05       	cpc	r16, r8
 152:	1a 05       	cpc	r17, r10
 154:	a5 04       	cpc	r10, r5
 156:	1a 05       	cpc	r17, r10
 158:	1a 05       	cpc	r17, r10
 15a:	c1 04       	cpc	r12, r1
 15c:	13 05       	cpc	r17, r3
 15e:	1a 05       	cpc	r17, r10
 160:	1a 05       	cpc	r17, r10
 162:	1a 05       	cpc	r17, r10
 164:	1a 05       	cpc	r17, r10
 166:	1a 05       	cpc	r17, r10
 168:	1a 05       	cpc	r17, r10
 16a:	1a 05       	cpc	r17, r10
 16c:	1a 05       	cpc	r17, r10
 16e:	1a 05       	cpc	r17, r10
 170:	1a 05       	cpc	r17, r10
 172:	1a 05       	cpc	r17, r10
 174:	1a 05       	cpc	r17, r10
 176:	1a 05       	cpc	r17, r10
 178:	1a 05       	cpc	r17, r10
 17a:	1a 05       	cpc	r17, r10
 17c:	1a 05       	cpc	r17, r10
 17e:	1a 05       	cpc	r17, r10
 180:	1a 05       	cpc	r17, r10
 182:	1a 05       	cpc	r17, r10
 184:	1a 05       	cpc	r17, r10
 186:	1a 05       	cpc	r17, r10
 188:	1a 05       	cpc	r17, r10
 18a:	1a 05       	cpc	r17, r10
 18c:	1a 05       	cpc	r17, r10
 18e:	1a 05       	cpc	r17, r10
 190:	1a 05       	cpc	r17, r10
 192:	1a 05       	cpc	r17, r10
 194:	1a 05       	cpc	r17, r10
 196:	24 05       	cpc	r18, r4
 198:	65 04       	cpc	r6, r5
 19a:	87 04       	cpc	r8, r7
 19c:	1a 05       	cpc	r17, r10
 19e:	fd 04       	cpc	r15, r13
 1a0:	1a 05       	cpc	r17, r10
 1a2:	1a 05       	cpc	r17, r10
 1a4:	1a 05       	cpc	r17, r10
 1a6:	1a 05       	cpc	r17, r10
 1a8:	1a 05       	cpc	r17, r10
 1aa:	1a 05       	cpc	r17, r10
 1ac:	1a 05       	cpc	r17, r10
 1ae:	1a 05       	cpc	r17, r10
 1b0:	1a 05       	cpc	r17, r10
 1b2:	1a 05       	cpc	r17, r10
 1b4:	1a 05       	cpc	r17, r10
 1b6:	1a 05       	cpc	r17, r10
 1b8:	08 05       	cpc	r16, r8
 1ba:	1a 05       	cpc	r17, r10
 1bc:	b2 04       	cpc	r11, r2
 1be:	1a 05       	cpc	r17, r10
 1c0:	1a 05       	cpc	r17, r10
 1c2:	ce 04       	cpc	r12, r14
 1c4:	1a 05       	cpc	r17, r10
 1c6:	1a 05       	cpc	r17, r10
 1c8:	1a 05       	cpc	r17, r10
 1ca:	1a 05       	cpc	r17, r10
 1cc:	1a 05       	cpc	r17, r10
 1ce:	1a 05       	cpc	r17, r10
 1d0:	1a 05       	cpc	r17, r10
 1d2:	1a 05       	cpc	r17, r10
 1d4:	1a 05       	cpc	r17, r10
 1d6:	dc 04       	cpc	r13, r12
 1d8:	65 04       	cpc	r6, r5
 1da:	6f 04       	cpc	r6, r15
 1dc:	1a 05       	cpc	r17, r10
 1de:	fd 04       	cpc	r15, r13
 1e0:	1a 05       	cpc	r17, r10
 1e2:	1a 05       	cpc	r17, r10
 1e4:	1a 05       	cpc	r17, r10
 1e6:	1a 05       	cpc	r17, r10
 1e8:	1a 05       	cpc	r17, r10
 1ea:	1a 05       	cpc	r17, r10
 1ec:	1a 05       	cpc	r17, r10
 1ee:	1a 05       	cpc	r17, r10
 1f0:	1a 05       	cpc	r17, r10
 1f2:	1a 05       	cpc	r17, r10
 1f4:	1a 05       	cpc	r17, r10
 1f6:	1a 05       	cpc	r17, r10
 1f8:	08 05       	cpc	r16, r8
 1fa:	1a 05       	cpc	r17, r10
 1fc:	a4 04       	cpc	r10, r4
 1fe:	1a 05       	cpc	r17, r10
 200:	1a 05       	cpc	r17, r10
 202:	c0 04       	cpc	r12, r0

00000204 <__ctors_end>:
 204:	11 24       	eor	r1, r1
 206:	1f be       	out	0x3f, r1	; 63
 208:	cf ef       	ldi	r28, 0xFF	; 255
 20a:	d8 e0       	ldi	r29, 0x08	; 8
 20c:	de bf       	out	0x3e, r29	; 62
 20e:	cd bf       	out	0x3d, r28	; 61

00000210 <__do_copy_data>:
 210:	12 e0       	ldi	r17, 0x02	; 2
 212:	a0 e0       	ldi	r26, 0x00	; 0
 214:	b1 e0       	ldi	r27, 0x01	; 1
 216:	e6 e1       	ldi	r30, 0x16	; 22
 218:	fe e0       	ldi	r31, 0x0E	; 14
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x10>
 21c:	05 90       	lpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a6 3f       	cpi	r26, 0xF6	; 246
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0xc>

00000226 <__do_clear_bss>:
 226:	22 e0       	ldi	r18, 0x02	; 2
 228:	a6 ef       	ldi	r26, 0xF6	; 246
 22a:	b2 e0       	ldi	r27, 0x02	; 2
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	ab 3f       	cpi	r26, 0xFB	; 251
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <main>
 23a:	0c 94 09 07 	jmp	0xe12	; 0xe12 <_exit>

0000023e <__bad_interrupt>:
 23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <usi_transfer>:
  ADXL_CS_LOW;
  usi_transfer(ADXL362_READ_FIFO);
  for(i = 0; i < len; i++)
    out[i] = usi_transfer(0x00);
  ADXL_CS_HIGH;
}
 242:	8e bd       	out	0x2e, r24	; 46
 244:	0d b4       	in	r0, 0x2d	; 45
 246:	07 fe       	sbrs	r0, 7
 248:	fd cf       	rjmp	.-6      	; 0x244 <usi_transfer+0x2>
 24a:	8e b5       	in	r24, 0x2e	; 46
 24c:	08 95       	ret

0000024e <read_reg16>:
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	c8 2f       	mov	r28, r24
 254:	2a 98       	cbi	0x05, 2	; 5
 256:	8b e0       	ldi	r24, 0x0B	; 11
 258:	0e 94 21 01 	call	0x242	; 0x242 <usi_transfer>
 25c:	8c 2f       	mov	r24, r28
 25e:	0e 94 21 01 	call	0x242	; 0x242 <usi_transfer>
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	0e 94 21 01 	call	0x242	; 0x242 <usi_transfer>
 268:	c8 2f       	mov	r28, r24
 26a:	d0 e0       	ldi	r29, 0x00	; 0
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	0e 94 21 01 	call	0x242	; 0x242 <usi_transfer>
 272:	2a 9a       	sbi	0x05, 2	; 5
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	98 2f       	mov	r25, r24
 278:	88 27       	eor	r24, r24
 27a:	8c 0f       	add	r24, r28
 27c:	9d 1f       	adc	r25, r29
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <read_axis>:
 284:	81 30       	cpi	r24, 0x01	; 1
 286:	91 05       	cpc	r25, r1
 288:	49 f0       	breq	.+18     	; 0x29c <read_axis+0x18>
 28a:	82 30       	cpi	r24, 0x02	; 2
 28c:	91 05       	cpc	r25, r1
 28e:	51 f0       	breq	.+20     	; 0x2a4 <read_axis+0x20>
 290:	89 2b       	or	r24, r25
 292:	61 f4       	brne	.+24     	; 0x2ac <read_axis+0x28>
 294:	8e e0       	ldi	r24, 0x0E	; 14
 296:	0e 94 27 01 	call	0x24e	; 0x24e <read_reg16>
 29a:	08 95       	ret
 29c:	80 e1       	ldi	r24, 0x10	; 16
 29e:	0e 94 27 01 	call	0x24e	; 0x24e <read_reg16>
 2a2:	08 95       	ret
 2a4:	82 e1       	ldi	r24, 0x12	; 18
 2a6:	0e 94 27 01 	call	0x24e	; 0x24e <read_reg16>
 2aa:	08 95       	ret
 2ac:	82 e1       	ldi	r24, 0x12	; 18
 2ae:	0e 94 27 01 	call	0x24e	; 0x24e <read_reg16>
 2b2:	08 95       	ret

000002b4 <write_reg>:

void write_reg(uint8_t reg, uint8_t value) {
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	d8 2f       	mov	r29, r24
 2ba:	c6 2f       	mov	r28, r22
  ADXL_CS_LOW;
 2bc:	2a 98       	cbi	0x05, 2	; 5

  usi_transfer(ADXL362_WRITE_REGISTER);
 2be:	8a e0       	ldi	r24, 0x0A	; 10
 2c0:	0e 94 21 01 	call	0x242	; 0x242 <usi_transfer>
  usi_transfer(reg);
 2c4:	8d 2f       	mov	r24, r29
 2c6:	0e 94 21 01 	call	0x242	; 0x242 <usi_transfer>
  usi_transfer(value);
 2ca:	8c 2f       	mov	r24, r28
 2cc:	0e 94 21 01 	call	0x242	; 0x242 <usi_transfer>

  ADXL_CS_HIGH;
 2d0:	2a 9a       	sbi	0x05, 2	; 5
}
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	08 95       	ret

000002d8 <adxl362_begin>:
#include "adxl362.h"
#include <util/delay.h>
// need to call before anything
void adxl362_begin() {
  //ADXL_DDR |= (1 << ADXL_CS);
  DDRD = (0<<DDRD2);
 2d8:	1a b8       	out	0x0a, r1	; 10
  ADXL_DDR = (1 << ADXL_MOSI)|(1<<ADXL_SCK)&(0<<ADXL_MISO)|(1<<ADXL_CS);
 2da:	8c e0       	ldi	r24, 0x0C	; 12
 2dc:	84 b9       	out	0x04, r24	; 4
 // ADXL_DDR &= ~(1 << ADXL_MISO);
  //ADXL_PORT |= (1 << ADXL_MISO); // pullup
  SPCR0=(1<<SPE)|(1<<MSTR);
 2de:	80 e5       	ldi	r24, 0x50	; 80
 2e0:	8c bd       	out	0x2c, r24	; 44
  
  ADXL_CS_HIGH;
 2e2:	2a 9a       	sbi	0x05, 2	; 5
 

  write_reg(SOFT_RESET, 0x52); // soft reset
 2e4:	62 e5       	ldi	r22, 0x52	; 82
 2e6:	8f e1       	ldi	r24, 0x1F	; 31
 2e8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <write_reg>
 2ec:	08 95       	ret

000002ee <i2c_init>:
    } else {
        status = TRANSMISSION_ERROR;
    }

    return status;
}
 2ee:	e9 eb       	ldi	r30, 0xB9	; 185
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	80 81       	ld	r24, Z
 2f4:	8c 7f       	andi	r24, 0xFC	; 252
 2f6:	80 83       	st	Z, r24
 2f8:	88 e3       	ldi	r24, 0x38	; 56
 2fa:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 2fe:	08 95       	ret

00000300 <i2c_tx_start>:
 300:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <__data_end>
 304:	ec eb       	ldi	r30, 0xBC	; 188
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	80 81       	ld	r24, Z
 30a:	84 6a       	ori	r24, 0xA4	; 164
 30c:	80 83       	st	Z, r24
 30e:	80 81       	ld	r24, Z
 310:	88 23       	and	r24, r24
 312:	ec f7       	brge	.-6      	; 0x30e <i2c_tx_start+0xe>
 314:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 318:	88 7f       	andi	r24, 0xF8	; 248
 31a:	88 30       	cpi	r24, 0x08	; 8
 31c:	21 f0       	breq	.+8      	; 0x326 <i2c_tx_start+0x26>
 31e:	80 31       	cpi	r24, 0x10	; 16
 320:	11 f0       	breq	.+4      	; 0x326 <i2c_tx_start+0x26>
 322:	8e ef       	ldi	r24, 0xFE	; 254
 324:	08 95       	ret
 326:	8f ef       	ldi	r24, 0xFF	; 255
 328:	08 95       	ret

0000032a <i2c_tx_address>:
 32a:	88 0f       	add	r24, r24
 32c:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <__data_end>
 330:	89 2b       	or	r24, r25
 332:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 336:	ec eb       	ldi	r30, 0xBC	; 188
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	8f 7d       	andi	r24, 0xDF	; 223
 33e:	80 83       	st	Z, r24
 340:	80 81       	ld	r24, Z
 342:	80 68       	ori	r24, 0x80	; 128
 344:	80 83       	st	Z, r24
 346:	80 81       	ld	r24, Z
 348:	88 23       	and	r24, r24
 34a:	ec f7       	brge	.-6      	; 0x346 <i2c_tx_address+0x1c>
 34c:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <__data_end>
 350:	81 11       	cpse	r24, r1
 352:	07 c0       	rjmp	.+14     	; 0x362 <i2c_tx_address+0x38>
 354:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 358:	88 7f       	andi	r24, 0xF8	; 248
 35a:	88 31       	cpi	r24, 0x18	; 24
 35c:	59 f0       	breq	.+22     	; 0x374 <i2c_tx_address+0x4a>
 35e:	8e ef       	ldi	r24, 0xFE	; 254
 360:	08 95       	ret
 362:	81 30       	cpi	r24, 0x01	; 1
 364:	49 f4       	brne	.+18     	; 0x378 <i2c_tx_address+0x4e>
 366:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 36a:	88 7f       	andi	r24, 0xF8	; 248
 36c:	80 34       	cpi	r24, 0x40	; 64
 36e:	31 f0       	breq	.+12     	; 0x37c <i2c_tx_address+0x52>
 370:	8e ef       	ldi	r24, 0xFE	; 254
 372:	08 95       	ret
 374:	8f ef       	ldi	r24, 0xFF	; 255
 376:	08 95       	ret
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	08 95       	ret
 37c:	8f ef       	ldi	r24, 0xFF	; 255
 37e:	08 95       	ret

00000380 <i2c_tx_byte>:
 380:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 384:	ec eb       	ldi	r30, 0xBC	; 188
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	80 81       	ld	r24, Z
 38a:	80 68       	ori	r24, 0x80	; 128
 38c:	80 83       	st	Z, r24
 38e:	80 81       	ld	r24, Z
 390:	88 23       	and	r24, r24
 392:	ec f7       	brge	.-6      	; 0x38e <i2c_tx_byte+0xe>
 394:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 398:	88 7f       	andi	r24, 0xF8	; 248
 39a:	88 32       	cpi	r24, 0x28	; 40
 39c:	11 f0       	breq	.+4      	; 0x3a2 <i2c_tx_byte+0x22>
 39e:	8e ef       	ldi	r24, 0xFE	; 254
 3a0:	08 95       	ret
 3a2:	8f ef       	ldi	r24, 0xFF	; 255
 3a4:	08 95       	ret

000003a6 <i2c_tx_stop>:

void i2c_tx_stop(void)
{
    /* clear interrupt flag, issue stop command (cleared automatically) */
    TWCR0 |= (1 << TWINT) | (1 << TWSTO);
 3a6:	ec eb       	ldi	r30, 0xBC	; 188
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	80 81       	ld	r24, Z
 3ac:	80 69       	ori	r24, 0x90	; 144
 3ae:	80 83       	st	Z, r24

    while (!(TWCR0 & (1 << TWSTO))); // wait until stop transmitted
 3b0:	80 81       	ld	r24, Z
 3b2:	84 ff       	sbrs	r24, 4
 3b4:	fd cf       	rjmp	.-6      	; 0x3b0 <i2c_tx_stop+0xa>
}
 3b6:	08 95       	ret

000003b8 <main>:

int main(void)
{
    /* Replace with your application code */
   //uart_init();
   adxl362_begin();
 3b8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <adxl362_begin>
   //stdout = &uart_output;
   //stdin  = &uart_input;
   OLED_Init();
 3bc:	0e 94 6d 02 	call	0x4da	; 0x4da <OLED_Init>
   OLED_Clear();
 3c0:	0e 94 31 02 	call	0x462	; 0x462 <OLED_Clear>
   //OLED_EnableInversion();
   ADCSRA |= _BV(ADEN);
 3c4:	ea e7       	ldi	r30, 0x7A	; 122
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	80 68       	ori	r24, 0x80	; 128
 3cc:	80 83       	st	Z, r24
   OLED_SetCursor(0,0);
 3ce:	60 e0       	ldi	r22, 0x00	; 0
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	0e 94 bd 02 	call	0x57a	; 0x57a <OLED_SetCursor>
	OLED_Printf("388 Pedometer");
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	91 e0       	ldi	r25, 0x01	; 1
 3da:	9f 93       	push	r25
 3dc:	8f 93       	push	r24
 3de:	0e 94 16 04 	call	0x82c	; 0x82c <OLED_Printf>
	OLED_SetCursor(2,2);
 3e2:	62 e0       	ldi	r22, 0x02	; 2
 3e4:	82 e0       	ldi	r24, 0x02	; 2
 3e6:	0e 94 bd 02 	call	0x57a	; 0x57a <OLED_SetCursor>
	OLED_Printf("Steps Taken:");
 3ea:	8e e0       	ldi	r24, 0x0E	; 14
 3ec:	91 e0       	ldi	r25, 0x01	; 1
 3ee:	9f 93       	push	r25
 3f0:	8f 93       	push	r24
 3f2:	0e 94 16 04 	call	0x82c	; 0x82c <OLED_Printf>
 3f6:	0f 90       	pop	r0
 3f8:	0f 90       	pop	r0
 3fa:	0f 90       	pop	r0
 3fc:	0f 90       	pop	r0
   //write_reg(0x2A,0b11000000);
   //config_act_int(1,1);
   
   while (1) {
	  
	accel=read_axis(0);
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	0e 94 42 01 	call	0x284	; 0x284 <read_axis>
 406:	90 93 f8 02 	sts	0x02F8, r25	; 0x8002f8 <accel+0x1>
 40a:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <accel>
	OLED_DisplayNumber(C_BINARY_U8, accel, 12);
 40e:	ac 01       	movw	r20, r24
 410:	60 e0       	ldi	r22, 0x00	; 0
 412:	70 e0       	ldi	r23, 0x00	; 0
 414:	2c e0       	ldi	r18, 0x0C	; 12
 416:	82 e0       	ldi	r24, 0x02	; 2
 418:	0e 94 35 03 	call	0x66a	; 0x66a <OLED_DisplayNumber>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 41c:	2f ef       	ldi	r18, 0xFF	; 255
 41e:	81 ee       	ldi	r24, 0xE1	; 225
 420:	94 e0       	ldi	r25, 0x04	; 4
 422:	21 50       	subi	r18, 0x01	; 1
 424:	80 40       	sbci	r24, 0x00	; 0
 426:	90 40       	sbci	r25, 0x00	; 0
 428:	e1 f7       	brne	.-8      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 42c:	00 00       	nop
 42e:	e7 cf       	rjmp	.-50     	; 0x3fe <main+0x46>

00000430 <oledSendStart>:
{
    if(lineNumber<8)
    {   /* If the line number is within range
         then move it to specified line and keep track*/
        OledLineNum = lineNumber;
        OLED_SetCursor(OledLineNum,0);
 430:	cf 93       	push	r28
 432:	c8 2f       	mov	r28, r24
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	0e 94 80 01 	call	0x300	; 0x300 <i2c_tx_start>
 43a:	8c 2f       	mov	r24, r28
 43c:	0e 94 95 01 	call	0x32a	; 0x32a <i2c_tx_address>
 440:	cf 91       	pop	r28
 442:	08 95       	ret

00000444 <oledSendCommand>:
 444:	cf 93       	push	r28
 446:	c8 2f       	mov	r28, r24
 448:	8c e3       	ldi	r24, 0x3C	; 60
 44a:	0e 94 18 02 	call	0x430	; 0x430 <oledSendStart>
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	0e 94 c0 01 	call	0x380	; 0x380 <i2c_tx_byte>
 454:	8c 2f       	mov	r24, r28
 456:	0e 94 c0 01 	call	0x380	; 0x380 <i2c_tx_byte>
 45a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <i2c_tx_stop>
 45e:	cf 91       	pop	r28
 460:	08 95       	ret

00000462 <OLED_Clear>:
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
 466:	81 e2       	ldi	r24, 0x21	; 33
 468:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 472:	8f e7       	ldi	r24, 0x7F	; 127
 474:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 478:	82 e2       	ldi	r24, 0x22	; 34
 47a:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 484:	87 e0       	ldi	r24, 0x07	; 7
 486:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 48a:	8c e3       	ldi	r24, 0x3C	; 60
 48c:	0e 94 18 02 	call	0x430	; 0x430 <oledSendStart>
 490:	80 e4       	ldi	r24, 0x40	; 64
 492:	0e 94 c0 01 	call	0x380	; 0x380 <i2c_tx_byte>
 496:	c0 e0       	ldi	r28, 0x00	; 0
 498:	d4 e0       	ldi	r29, 0x04	; 4
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	0e 94 c0 01 	call	0x380	; 0x380 <i2c_tx_byte>
 4a0:	21 97       	sbiw	r28, 0x01	; 1
 4a2:	d9 f7       	brne	.-10     	; 0x49a <OLED_Clear+0x38>
 4a4:	81 e2       	ldi	r24, 0x21	; 33
 4a6:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 4b0:	8f e7       	ldi	r24, 0x7F	; 127
 4b2:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 4b6:	82 e2       	ldi	r24, 0x22	; 34
 4b8:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 4c2:	87 e0       	ldi	r24, 0x07	; 7
 4c4:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 4c8:	8c e3       	ldi	r24, 0x3C	; 60
 4ca:	0e 94 18 02 	call	0x430	; 0x430 <oledSendStart>
 4ce:	80 e4       	ldi	r24, 0x40	; 64
 4d0:	0e 94 c0 01 	call	0x380	; 0x380 <i2c_tx_byte>
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	08 95       	ret

000004da <OLED_Init>:
 4da:	0e 94 77 01 	call	0x2ee	; 0x2ee <i2c_init>
 4de:	8e ea       	ldi	r24, 0xAE	; 174
 4e0:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 4e4:	85 ed       	ldi	r24, 0xD5	; 213
 4e6:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 4ea:	80 e8       	ldi	r24, 0x80	; 128
 4ec:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 4f0:	88 ea       	ldi	r24, 0xA8	; 168
 4f2:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 4f6:	8f e3       	ldi	r24, 0x3F	; 63
 4f8:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 4fc:	83 ed       	ldi	r24, 0xD3	; 211
 4fe:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 508:	80 e6       	ldi	r24, 0x60	; 96
 50a:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 50e:	8d e8       	ldi	r24, 0x8D	; 141
 510:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 514:	84 e1       	ldi	r24, 0x14	; 20
 516:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 51a:	80 e2       	ldi	r24, 0x20	; 32
 51c:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 526:	81 ea       	ldi	r24, 0xA1	; 161
 528:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 52c:	88 ec       	ldi	r24, 0xC8	; 200
 52e:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 532:	8a ed       	ldi	r24, 0xDA	; 218
 534:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 538:	82 e0       	ldi	r24, 0x02	; 2
 53a:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 53e:	81 e8       	ldi	r24, 0x81	; 129
 540:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 544:	8f e8       	ldi	r24, 0x8F	; 143
 546:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 54a:	89 ed       	ldi	r24, 0xD9	; 217
 54c:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 550:	81 ef       	ldi	r24, 0xF1	; 241
 552:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 556:	8b ed       	ldi	r24, 0xDB	; 219
 558:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 55c:	80 e4       	ldi	r24, 0x40	; 64
 55e:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 562:	84 ea       	ldi	r24, 0xA4	; 164
 564:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 568:	86 ea       	ldi	r24, 0xA6	; 166
 56a:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 56e:	8f ea       	ldi	r24, 0xAF	; 175
 570:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 574:	0e 94 31 02 	call	0x462	; 0x462 <OLED_Clear>
 578:	08 95       	ret

0000057a <OLED_SetCursor>:
 57a:	cf 93       	push	r28
 57c:	df 93       	push	r29
 57e:	88 30       	cpi	r24, 0x08	; 8
 580:	00 f5       	brcc	.+64     	; 0x5c2 <OLED_SetCursor+0x48>
 582:	66 23       	and	r22, r22
 584:	f4 f0       	brlt	.+60     	; 0x5c2 <OLED_SetCursor+0x48>
 586:	d6 2f       	mov	r29, r22
 588:	c8 2f       	mov	r28, r24
 58a:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <OledLineNum>
 58e:	60 93 fa 02 	sts	0x02FA, r22	; 0x8002fa <OledCursorPos>
 592:	81 e2       	ldi	r24, 0x21	; 33
 594:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 598:	8d 2f       	mov	r24, r29
 59a:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 59e:	8f e7       	ldi	r24, 0x7F	; 127
 5a0:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 5a4:	82 e2       	ldi	r24, 0x22	; 34
 5a6:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 5aa:	8c 2f       	mov	r24, r28
 5ac:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 5b0:	87 e0       	ldi	r24, 0x07	; 7
 5b2:	0e 94 22 02 	call	0x444	; 0x444 <oledSendCommand>
 5b6:	8c e3       	ldi	r24, 0x3C	; 60
 5b8:	0e 94 18 02 	call	0x430	; 0x430 <oledSendStart>
 5bc:	80 e4       	ldi	r24, 0x40	; 64
 5be:	0e 94 c0 01 	call	0x380	; 0x380 <i2c_tx_byte>
 5c2:	df 91       	pop	r29
 5c4:	cf 91       	pop	r28
 5c6:	08 95       	ret

000005c8 <OLED_GoToNextLine>:
void  OLED_GoToNextLine()
{
    /*Increment the current line number.
     In case it exceeds the limit, rool it back to first line */
    OledLineNum++;
    OledLineNum = OledLineNum&0x07;
 5c8:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <OledLineNum>
 5cc:	8f 5f       	subi	r24, 0xFF	; 255
 5ce:	87 70       	andi	r24, 0x07	; 7
 5d0:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <OledLineNum>
    OLED_SetCursor(OledLineNum,0); /* Finally move it to next line */
 5d4:	60 e0       	ldi	r22, 0x00	; 0
 5d6:	0e 94 bd 02 	call	0x57a	; 0x57a <OLED_SetCursor>
 5da:	08 95       	ret

000005dc <OLED_DisplayChar>:
 * Return value    : none
 * description  : This function sends a character to be displayed on LCD.
 Any valid ascii value can be passed to display respective character
 ****************************************************************************************************/
void OLED_DisplayChar(uint8_t ch)
{
 5dc:	1f 93       	push	r17
 5de:	cf 93       	push	r28
 5e0:	df 93       	push	r29
 5e2:	c8 2f       	mov	r28, r24
    uint8_t dat,i=0;
    
    if(((OledCursorPos+FONT_SIZE)>=128) || (ch=='\n'))
 5e4:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <OledCursorPos>
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	05 96       	adiw	r24, 0x05	; 5
 5ec:	80 38       	cpi	r24, 0x80	; 128
 5ee:	91 05       	cpc	r25, r1
 5f0:	1c f4       	brge	.+6      	; 0x5f8 <OLED_DisplayChar+0x1c>
 5f2:	ca 30       	cpi	r28, 0x0A	; 10
 5f4:	29 f4       	brne	.+10     	; 0x600 <OLED_DisplayChar+0x24>
 5f6:	24 c0       	rjmp	.+72     	; 0x640 <OLED_DisplayChar+0x64>
    {
        /* If the cursor has reached to end of line on page1
         OR NewLine command is issued Then Move the cursor to next line */
        OLED_GoToNextLine();
 5f8:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <OLED_GoToNextLine>
    }
    if(ch!='\n') /* TODO */
 5fc:	ca 30       	cpi	r28, 0x0A	; 10
 5fe:	11 f1       	breq	.+68     	; 0x644 <OLED_DisplayChar+0x68>
 600:	c0 52       	subi	r28, 0x20	; 32
 602:	d0 e0       	ldi	r29, 0x00	; 0
 604:	ce 01       	movw	r24, r28
 606:	88 0f       	add	r24, r24
 608:	99 1f       	adc	r25, r25
 60a:	88 0f       	add	r24, r24
 60c:	99 1f       	adc	r25, r25
 60e:	c8 0f       	add	r28, r24
 610:	d9 1f       	adc	r29, r25
 612:	c5 5e       	subi	r28, 0xE5	; 229
 614:	de 4f       	sbci	r29, 0xFE	; 254
 * description  : This function sends a character to be displayed on LCD.
 Any valid ascii value can be passed to display respective character
 ****************************************************************************************************/
void OLED_DisplayChar(uint8_t ch)
{
    uint8_t dat,i=0;
 616:	10 e0       	ldi	r17, 0x00	; 0


void oledSendByte(uint8_t ch){

    
    i2c_tx_byte(ch);
 618:	89 91       	ld	r24, Y+
 61a:	0e 94 c0 01 	call	0x380	; 0x380 <i2c_tx_byte>
        {
            dat= OledFontTable[ch][i]; /* Get the data to be displayed for LookUptable*/
            
            
            oledSendByte(dat); /* Display the data and keep track of cursor */
            OledCursorPos++;
 61e:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <OledCursorPos>
 622:	8f 5f       	subi	r24, 0xFF	; 255
 624:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <OledCursorPos>
            
            i++;
 628:	1f 5f       	subi	r17, 0xFF	; 255
            
            if(i==FONT_SIZE) /* Exit the loop if End of char is encountered */
 62a:	15 30       	cpi	r17, 0x05	; 5
 62c:	a9 f7       	brne	.-22     	; 0x618 <OLED_DisplayChar+0x3c>


void oledSendByte(uint8_t ch){

    
    i2c_tx_byte(ch);
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	0e 94 c0 01 	call	0x380	; 0x380 <i2c_tx_byte>
            i++;
            
            if(i==FONT_SIZE) /* Exit the loop if End of char is encountered */
            {
                oledSendByte(0x00); /* Display the data and keep track of cursor */
                OledCursorPos++;
 634:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <OledCursorPos>
 638:	8f 5f       	subi	r24, 0xFF	; 255
 63a:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <OledCursorPos>
                break;
            }
        }
    }
}
 63e:	02 c0       	rjmp	.+4      	; 0x644 <OLED_DisplayChar+0x68>
    
    if(((OledCursorPos+FONT_SIZE)>=128) || (ch=='\n'))
    {
        /* If the cursor has reached to end of line on page1
         OR NewLine command is issued Then Move the cursor to next line */
        OLED_GoToNextLine();
 640:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <OLED_GoToNextLine>
                OledCursorPos++;
                break;
            }
        }
    }
}
 644:	df 91       	pop	r29
 646:	cf 91       	pop	r28
 648:	1f 91       	pop	r17
 64a:	08 95       	ret

0000064c <OLED_DisplayString>:
 1.The ptr_stringPointer_u8 points to the first char of the string
 and traverses till the end(NULL CHAR)and displays a char each time.
 ****************************************************************************************************/
#if(Enable_OLED_DisplayString==1)
void OLED_DisplayString(uint8_t *ptr)
{
 64c:	cf 93       	push	r28
 64e:	df 93       	push	r29
 650:	ec 01       	movw	r28, r24
    while(*ptr)
 652:	88 81       	ld	r24, Y
 654:	88 23       	and	r24, r24
 656:	31 f0       	breq	.+12     	; 0x664 <OLED_DisplayString+0x18>
 658:	21 96       	adiw	r28, 0x01	; 1
        OLED_DisplayChar(*ptr++);
 65a:	0e 94 ee 02 	call	0x5dc	; 0x5dc <OLED_DisplayChar>
 and traverses till the end(NULL CHAR)and displays a char each time.
 ****************************************************************************************************/
#if(Enable_OLED_DisplayString==1)
void OLED_DisplayString(uint8_t *ptr)
{
    while(*ptr)
 65e:	89 91       	ld	r24, Y+
 660:	81 11       	cpse	r24, r1
 662:	fb cf       	rjmp	.-10     	; 0x65a <OLED_DisplayString+0xe>
        OLED_DisplayChar(*ptr++);
}
 664:	df 91       	pop	r29
 666:	cf 91       	pop	r28
 668:	08 95       	ret

0000066a <OLED_DisplayNumber>:
 8.(C_HEX_U8,0x12AB,6) then 6-digits ie. 0012AB will be displayed
 9.(C_HEX_U8,0x12AB,C_DisplayDefaultDigits_U8) then 12AB will be displayed.
 ****************************************************************************************************/
#if ((Enable_OLED_DisplayNumber == 1) || (Enable_OLED_DisplayFloatNumber == 1) || (Enable_OLED_Printf==1))
void OLED_DisplayNumber(uint8_t v_numericSystem_u8, uint32_t v_number_u32, uint8_t v_numOfDigitsToDisplay_u8)
{
 66a:	4f 92       	push	r4
 66c:	5f 92       	push	r5
 66e:	6f 92       	push	r6
 670:	7f 92       	push	r7
 672:	8f 92       	push	r8
 674:	9f 92       	push	r9
 676:	af 92       	push	r10
 678:	bf 92       	push	r11
 67a:	cf 92       	push	r12
 67c:	df 92       	push	r13
 67e:	ef 92       	push	r14
 680:	ff 92       	push	r15
 682:	0f 93       	push	r16
 684:	1f 93       	push	r17
 686:	cf 93       	push	r28
 688:	df 93       	push	r29
 68a:	cd b7       	in	r28, 0x3d	; 61
 68c:	de b7       	in	r29, 0x3e	; 62
 68e:	2a 97       	sbiw	r28, 0x0a	; 10
 690:	0f b6       	in	r0, 0x3f	; 63
 692:	f8 94       	cli
 694:	de bf       	out	0x3e, r29	; 62
 696:	0f be       	out	0x3f, r0	; 63
 698:	cd bf       	out	0x3d, r28	; 61
 69a:	88 2e       	mov	r8, r24
 69c:	6a 01       	movw	r12, r20
 69e:	7b 01       	movw	r14, r22
 6a0:	12 2f       	mov	r17, r18
    uint8_t i=0,a[10];
    
    if(C_BINARY_U8 == v_numericSystem_u8)
 6a2:	82 e0       	ldi	r24, 0x02	; 2
 6a4:	88 12       	cpse	r8, r24
 6a6:	24 c0       	rjmp	.+72     	; 0x6f0 <OLED_DisplayNumber+0x86>
    {
        while(v_numOfDigitsToDisplay_u8!=0)
 6a8:	22 23       	and	r18, r18
 6aa:	09 f4       	brne	.+2      	; 0x6ae <OLED_DisplayNumber+0x44>
 6ac:	70 c0       	rjmp	.+224    	; 0x78e <OLED_DisplayNumber+0x124>
        {
            /* Start Extracting the bits from the specified bit positions.
             Get the Acsii values of the bits and display */
            i = util_GetBitStatus(v_number_u32,(v_numOfDigitsToDisplay_u8-1));
            OLED_DisplayChar(util_Dec2Ascii(i));
 6ae:	aa 24       	eor	r10, r10
 6b0:	a3 94       	inc	r10
 6b2:	b1 2c       	mov	r11, r1
 6b4:	01 e0       	ldi	r16, 0x01	; 1
 6b6:	91 2c       	mov	r9, r1
 6b8:	8f ef       	ldi	r24, 0xFF	; 255
 6ba:	81 0f       	add	r24, r17
 6bc:	a5 01       	movw	r20, r10
 6be:	02 c0       	rjmp	.+4      	; 0x6c4 <OLED_DisplayNumber+0x5a>
 6c0:	44 0f       	add	r20, r20
 6c2:	55 1f       	adc	r21, r21
 6c4:	8a 95       	dec	r24
 6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <OLED_DisplayNumber+0x56>
 6c8:	05 2e       	mov	r0, r21
 6ca:	00 0c       	add	r0, r0
 6cc:	66 0b       	sbc	r22, r22
 6ce:	77 0b       	sbc	r23, r23
 6d0:	4c 21       	and	r20, r12
 6d2:	5d 21       	and	r21, r13
 6d4:	6e 21       	and	r22, r14
 6d6:	7f 21       	and	r23, r15
 6d8:	80 2f       	mov	r24, r16
 6da:	45 2b       	or	r20, r21
 6dc:	46 2b       	or	r20, r22
 6de:	47 2b       	or	r20, r23
 6e0:	09 f4       	brne	.+2      	; 0x6e4 <OLED_DisplayNumber+0x7a>
 6e2:	89 2d       	mov	r24, r9
 6e4:	80 5d       	subi	r24, 0xD0	; 208
 6e6:	0e 94 ee 02 	call	0x5dc	; 0x5dc <OLED_DisplayChar>
            v_numOfDigitsToDisplay_u8--;
 6ea:	11 50       	subi	r17, 0x01	; 1
{
    uint8_t i=0,a[10];
    
    if(C_BINARY_U8 == v_numericSystem_u8)
    {
        while(v_numOfDigitsToDisplay_u8!=0)
 6ec:	29 f7       	brne	.-54     	; 0x6b8 <OLED_DisplayNumber+0x4e>
 6ee:	4f c0       	rjmp	.+158    	; 0x78e <OLED_DisplayNumber+0x124>
            i = util_GetBitStatus(v_number_u32,(v_numOfDigitsToDisplay_u8-1));
            OLED_DisplayChar(util_Dec2Ascii(i));
            v_numOfDigitsToDisplay_u8--;
        }
    }
    else if(v_number_u32==0)
 6f0:	45 2b       	or	r20, r21
 6f2:	46 2b       	or	r20, r22
 6f4:	47 2b       	or	r20, r23
 6f6:	19 f0       	breq	.+6      	; 0x6fe <OLED_DisplayNumber+0x94>
        for(i=0;((i<v_numOfDigitsToDisplay_u8) && (i<C_MaxDigitsToDisplay_U8));i++)
            OLED_DisplayChar('0');
    }
    else
    {
        for(i=0;i<v_numOfDigitsToDisplay_u8;i++)
 6f8:	21 11       	cpse	r18, r1
 6fa:	0f c0       	rjmp	.+30     	; 0x71a <OLED_DisplayNumber+0xb0>
 6fc:	48 c0       	rjmp	.+144    	; 0x78e <OLED_DisplayNumber+0x124>
        }
    }
    else if(v_number_u32==0)
    {
        /* If the number is zero then update the array with the same for displaying */
        for(i=0;((i<v_numOfDigitsToDisplay_u8) && (i<C_MaxDigitsToDisplay_U8));i++)
 6fe:	22 23       	and	r18, r18
 700:	09 f4       	brne	.+2      	; 0x704 <OLED_DisplayNumber+0x9a>
 702:	45 c0       	rjmp	.+138    	; 0x78e <OLED_DisplayNumber+0x124>
 704:	00 e0       	ldi	r16, 0x00	; 0
            OLED_DisplayChar('0');
 706:	80 e3       	ldi	r24, 0x30	; 48
 708:	0e 94 ee 02 	call	0x5dc	; 0x5dc <OLED_DisplayChar>
        }
    }
    else if(v_number_u32==0)
    {
        /* If the number is zero then update the array with the same for displaying */
        for(i=0;((i<v_numOfDigitsToDisplay_u8) && (i<C_MaxDigitsToDisplay_U8));i++)
 70c:	0f 5f       	subi	r16, 0xFF	; 255
 70e:	10 17       	cp	r17, r16
 710:	09 f4       	brne	.+2      	; 0x714 <OLED_DisplayNumber+0xaa>
 712:	3d c0       	rjmp	.+122    	; 0x78e <OLED_DisplayNumber+0x124>
 714:	0a 30       	cpi	r16, 0x0A	; 10
 716:	b9 f7       	brne	.-18     	; 0x706 <OLED_DisplayNumber+0x9c>
 718:	3a c0       	rjmp	.+116    	; 0x78e <OLED_DisplayNumber+0x124>
 71a:	fe 01       	movw	r30, r28
 71c:	31 96       	adiw	r30, 0x01	; 1
 71e:	5f 01       	movw	r10, r30
            OLED_DisplayChar('0');
    }
    else
    {
        for(i=0;i<v_numOfDigitsToDisplay_u8;i++)
 720:	00 e0       	ldi	r16, 0x00	; 0
                /* Extract the digits from the number till it becomes zero.
                 First get the remainder and divide the number by TypeOfNum(10-Dec, 16-Hex) each time.
                 example for Decimal number:
                 If v_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
                 The process continues till it becomes zero or max digits reached*/
                a[i]=util_GetMod32(v_number_u32,v_numericSystem_u8);
 722:	48 2c       	mov	r4, r8
 724:	51 2c       	mov	r5, r1
 726:	61 2c       	mov	r6, r1
 728:	71 2c       	mov	r7, r1
    {
        for(i=0;i<v_numOfDigitsToDisplay_u8;i++)
        {
            /* Continue extracting the digits from right side
             till the Specified v_numOfDigitsToDisplay_u8 */
            if(v_number_u32!=0)
 72a:	c1 14       	cp	r12, r1
 72c:	d1 04       	cpc	r13, r1
 72e:	e1 04       	cpc	r14, r1
 730:	f1 04       	cpc	r15, r1
 732:	89 f0       	breq	.+34     	; 0x756 <OLED_DisplayNumber+0xec>
                /* Extract the digits from the number till it becomes zero.
                 First get the remainder and divide the number by TypeOfNum(10-Dec, 16-Hex) each time.
                 example for Decimal number:
                 If v_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
                 The process continues till it becomes zero or max digits reached*/
                a[i]=util_GetMod32(v_number_u32,v_numericSystem_u8);
 734:	9c 2c       	mov	r9, r12
 736:	c7 01       	movw	r24, r14
 738:	b6 01       	movw	r22, r12
 73a:	a3 01       	movw	r20, r6
 73c:	92 01       	movw	r18, r4
 73e:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__udivmodsi4>
 742:	c2 2e       	mov	r12, r18
 744:	d3 2e       	mov	r13, r19
 746:	e4 2e       	mov	r14, r20
 748:	f5 2e       	mov	r15, r21
 74a:	82 9e       	mul	r8, r18
 74c:	90 18       	sub	r9, r0
 74e:	11 24       	eor	r1, r1
 750:	f5 01       	movw	r30, r10
 752:	90 82       	st	Z, r9
 754:	07 c0       	rjmp	.+14     	; 0x764 <OLED_DisplayNumber+0xfa>
                v_number_u32=v_number_u32/v_numericSystem_u8;
            }
            else if( (v_numOfDigitsToDisplay_u8 == C_DisplayDefaultDigits_U8) ||
 756:	1b 30       	cpi	r17, 0x0B	; 11
 758:	18 f0       	brcs	.+6      	; 0x760 <OLED_DisplayNumber+0xf6>
                 Ex: v_num_u32 is 123 and user wants five digits then 00123 has to be displayed */
                a[i]=0;
            }
        }
        
        while(i!=0)
 75a:	01 11       	cpse	r16, r1
 75c:	0a c0       	rjmp	.+20     	; 0x772 <OLED_DisplayNumber+0x108>
 75e:	17 c0       	rjmp	.+46     	; 0x78e <OLED_DisplayNumber+0x124>
            else
            {
                /* In case user expects more digits to be displayed than the actual digits in number,
                 then update the remaining digits with zero.
                 Ex: v_num_u32 is 123 and user wants five digits then 00123 has to be displayed */
                a[i]=0;
 760:	f5 01       	movw	r30, r10
 762:	10 82       	st	Z, r1
        for(i=0;((i<v_numOfDigitsToDisplay_u8) && (i<C_MaxDigitsToDisplay_U8));i++)
            OLED_DisplayChar('0');
    }
    else
    {
        for(i=0;i<v_numOfDigitsToDisplay_u8;i++)
 764:	0f 5f       	subi	r16, 0xFF	; 255
 766:	ff ef       	ldi	r31, 0xFF	; 255
 768:	af 1a       	sub	r10, r31
 76a:	bf 0a       	sbc	r11, r31
 76c:	10 13       	cpse	r17, r16
 76e:	dd cf       	rjmp	.-70     	; 0x72a <OLED_DisplayNumber+0xc0>
 770:	01 c0       	rjmp	.+2      	; 0x774 <OLED_DisplayNumber+0x10a>
                 Ex: v_num_u32 is 123 and user wants five digits then 00123 has to be displayed */
                a[i]=0;
            }
        }
        
        while(i!=0)
 772:	10 2f       	mov	r17, r16
        {
            /* Finally get the ascii values of the digits and display*/
            OLED_DisplayChar(util_Hex2Ascii(a[i-1]));
 774:	fe 01       	movw	r30, r28
 776:	e1 0f       	add	r30, r17
 778:	f1 1d       	adc	r31, r1
 77a:	80 81       	ld	r24, Z
 77c:	8a 30       	cpi	r24, 0x0A	; 10
 77e:	10 f0       	brcs	.+4      	; 0x784 <OLED_DisplayNumber+0x11a>
 780:	89 5c       	subi	r24, 0xC9	; 201
 782:	01 c0       	rjmp	.+2      	; 0x786 <OLED_DisplayNumber+0x11c>
 784:	80 5d       	subi	r24, 0xD0	; 208
 786:	0e 94 ee 02 	call	0x5dc	; 0x5dc <OLED_DisplayChar>
            i--;
 78a:	11 50       	subi	r17, 0x01	; 1
                 Ex: v_num_u32 is 123 and user wants five digits then 00123 has to be displayed */
                a[i]=0;
            }
        }
        
        while(i!=0)
 78c:	99 f7       	brne	.-26     	; 0x774 <OLED_DisplayNumber+0x10a>
            /* Finally get the ascii values of the digits and display*/
            OLED_DisplayChar(util_Hex2Ascii(a[i-1]));
            i--;
        }
    }
}
 78e:	2a 96       	adiw	r28, 0x0a	; 10
 790:	0f b6       	in	r0, 0x3f	; 63
 792:	f8 94       	cli
 794:	de bf       	out	0x3e, r29	; 62
 796:	0f be       	out	0x3f, r0	; 63
 798:	cd bf       	out	0x3d, r28	; 61
 79a:	df 91       	pop	r29
 79c:	cf 91       	pop	r28
 79e:	1f 91       	pop	r17
 7a0:	0f 91       	pop	r16
 7a2:	ff 90       	pop	r15
 7a4:	ef 90       	pop	r14
 7a6:	df 90       	pop	r13
 7a8:	cf 90       	pop	r12
 7aa:	bf 90       	pop	r11
 7ac:	af 90       	pop	r10
 7ae:	9f 90       	pop	r9
 7b0:	8f 90       	pop	r8
 7b2:	7f 90       	pop	r7
 7b4:	6f 90       	pop	r6
 7b6:	5f 90       	pop	r5
 7b8:	4f 90       	pop	r4
 7ba:	08 95       	ret

000007bc <OLED_DisplayFloatNumber>:
 Note: Float will be disabled by default as it takes huge controller resources
 It can be enabled by changing value of Enable_OLED_DisplayFloatNumber to 1 in lcd.h
 ***************************************************************************************************/
#if (Enable_OLED_DisplayFloatNumber == 1)
void OLED_DisplayFloatNumber(double v_floatNum_f32)
{
 7bc:	8f 92       	push	r8
 7be:	9f 92       	push	r9
 7c0:	af 92       	push	r10
 7c2:	bf 92       	push	r11
 7c4:	cf 92       	push	r12
 7c6:	df 92       	push	r13
 7c8:	ef 92       	push	r14
 7ca:	ff 92       	push	r15
 7cc:	6b 01       	movw	r12, r22
 7ce:	7c 01       	movw	r14, r24
     1.Type cast the number to int to get the integer part.
     2.Display the extracted integer part followed by a decimal point(.)
     3.Later the integer part is made zero by subtracting with the extracted integer value.
     4.Finally the fractional part is multiplied by 100000 to support 6-digit precision */
    
    v_temp_u32 = (uint32_t) v_floatNum_f32;
 7d0:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__fixunssfsi>
 7d4:	4b 01       	movw	r8, r22
 7d6:	5c 01       	movw	r10, r24
    OLED_DisplayNumber(C_DECIMAL_U8,v_temp_u32,C_DisplayDefaultDigits_U8);
 7d8:	2f ef       	ldi	r18, 0xFF	; 255
 7da:	ab 01       	movw	r20, r22
 7dc:	bc 01       	movw	r22, r24
 7de:	8a e0       	ldi	r24, 0x0A	; 10
 7e0:	0e 94 35 03 	call	0x66a	; 0x66a <OLED_DisplayNumber>
    
    OLED_DisplayChar('.');
 7e4:	8e e2       	ldi	r24, 0x2E	; 46
 7e6:	0e 94 ee 02 	call	0x5dc	; 0x5dc <OLED_DisplayChar>
    
    v_floatNum_f32 = v_floatNum_f32 - v_temp_u32;
    v_temp_u32 = v_floatNum_f32 * 1000000;
 7ea:	c5 01       	movw	r24, r10
 7ec:	b4 01       	movw	r22, r8
 7ee:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__floatunsisf>
 7f2:	9b 01       	movw	r18, r22
 7f4:	ac 01       	movw	r20, r24
 7f6:	c7 01       	movw	r24, r14
 7f8:	b6 01       	movw	r22, r12
 7fa:	0e 94 4a 05 	call	0xa94	; 0xa94 <__subsf3>
 7fe:	20 e0       	ldi	r18, 0x00	; 0
 800:	34 e2       	ldi	r19, 0x24	; 36
 802:	44 e7       	ldi	r20, 0x74	; 116
 804:	59 e4       	ldi	r21, 0x49	; 73
 806:	0e 94 74 06 	call	0xce8	; 0xce8 <__mulsf3>
    OLED_DisplayNumber(C_DECIMAL_U8,v_temp_u32,C_DisplayDefaultDigits_U8);
 80a:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__fixunssfsi>
 80e:	ab 01       	movw	r20, r22
 810:	bc 01       	movw	r22, r24
 812:	2f ef       	ldi	r18, 0xFF	; 255
 814:	8a e0       	ldi	r24, 0x0A	; 10
 816:	0e 94 35 03 	call	0x66a	; 0x66a <OLED_DisplayNumber>
}
 81a:	ff 90       	pop	r15
 81c:	ef 90       	pop	r14
 81e:	df 90       	pop	r13
 820:	cf 90       	pop	r12
 822:	bf 90       	pop	r11
 824:	af 90       	pop	r10
 826:	9f 90       	pop	r9
 828:	8f 90       	pop	r8
 82a:	08 95       	ret

0000082c <OLED_Printf>:
 uint8_t v_Num_u8;
 OLED_Printf("num1:%u",(uint16_t)v_Num_u8);
 **************************************************************************************************/
#if ( Enable_OLED_Printf == 1 )
void OLED_Printf(const char *argList, ...)
{
 82c:	4f 92       	push	r4
 82e:	5f 92       	push	r5
 830:	6f 92       	push	r6
 832:	7f 92       	push	r7
 834:	8f 92       	push	r8
 836:	9f 92       	push	r9
 838:	af 92       	push	r10
 83a:	bf 92       	push	r11
 83c:	cf 92       	push	r12
 83e:	df 92       	push	r13
 840:	ef 92       	push	r14
 842:	ff 92       	push	r15
 844:	0f 93       	push	r16
 846:	1f 93       	push	r17
 848:	cf 93       	push	r28
 84a:	df 93       	push	r29
 84c:	cd b7       	in	r28, 0x3d	; 61
 84e:	de b7       	in	r29, 0x3e	; 62
 850:	fe 01       	movw	r30, r28
 852:	73 96       	adiw	r30, 0x13	; 19
 854:	81 90       	ld	r8, Z+
 856:	91 90       	ld	r9, Z+
    uint8_t v_numOfDigitsToDisp_u8;
#if (Enable_OLED_DisplayFloatNumber == 1)
    double v_floatNum_f32;
#endif
    
    va_start(argp, argList);
 858:	7f 01       	movw	r14, r30
    
    /* Loop through the list to extract all the input arguments */
    for(ptr = argList; *ptr != '\0'; ptr++)
 85a:	d4 01       	movw	r26, r8
 85c:	8c 91       	ld	r24, X
 85e:	88 23       	and	r24, r24
 860:	09 f4       	brne	.+2      	; 0x864 <OLED_Printf+0x38>
 862:	07 c1       	rjmp	.+526    	; 0xa72 <__stack+0x173>
                    break;
                    
                case 'B':  /* Argument type is of binary,Read int and convert to binary */
                    v_num_u32 = va_arg(argp, uint32_t);
                    if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
                        v_numOfDigitsToDisp_u8 = 16;
 864:	68 94       	set
 866:	aa 24       	eor	r10, r10
 868:	a4 f8       	bld	r10, 4
                    ch = *ptr;
                }
            }
            else
            {
                v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
 86a:	bb 24       	eor	r11, r11
 86c:	ba 94       	dec	r11
        ch= *ptr;
        if(ch == '%')         /*Check for '%' as there will be format specifier after it */
        {
            ptr++;
            ch = *ptr;
            if((ch>=0x30) && (ch<=0x39))
 86e:	00 e0       	ldi	r16, 0x00	; 0
    /* Loop through the list to extract all the input arguments */
    for(ptr = argList; *ptr != '\0'; ptr++)
    {
        
        ch= *ptr;
        if(ch == '%')         /*Check for '%' as there will be format specifier after it */
 870:	85 32       	cpi	r24, 0x25	; 37
 872:	09 f0       	breq	.+2      	; 0x876 <OLED_Printf+0x4a>
 874:	dc c0       	rjmp	.+440    	; 0xa2e <__stack+0x12f>
        {
            ptr++;
 876:	64 01       	movw	r12, r8
 878:	bf ef       	ldi	r27, 0xFF	; 255
 87a:	cb 1a       	sub	r12, r27
 87c:	db 0a       	sbc	r13, r27
            ch = *ptr;
 87e:	d4 01       	movw	r26, r8
 880:	11 96       	adiw	r26, 0x01	; 1
 882:	ec 91       	ld	r30, X
 884:	11 97       	sbiw	r26, 0x01	; 1
            if((ch>=0x30) && (ch<=0x39))
 886:	80 ed       	ldi	r24, 0xD0	; 208
 888:	8e 0f       	add	r24, r30
 88a:	8a 30       	cpi	r24, 0x0A	; 10
 88c:	08 f0       	brcs	.+2      	; 0x890 <OLED_Printf+0x64>
 88e:	e6 c0       	rjmp	.+460    	; 0xa5c <__stack+0x15d>
 890:	12 96       	adiw	r26, 0x02	; 2
 892:	10 2f       	mov	r17, r16
 894:	21 2f       	mov	r18, r17
 896:	22 0f       	add	r18, r18
 898:	82 2f       	mov	r24, r18
 89a:	88 0f       	add	r24, r24
 89c:	88 0f       	add	r24, r24
 89e:	28 0f       	add	r18, r24
 8a0:	20 53       	subi	r18, 0x30	; 48
            {
                v_numOfDigitsToDisp_u8 = 0;
                while((ch>=0x30) && (ch<=0x39))
                {
                    v_numOfDigitsToDisp_u8 = (v_numOfDigitsToDisp_u8 * 10) + (ch-0x30);
 8a2:	12 2f       	mov	r17, r18
 8a4:	1e 0f       	add	r17, r30
                    ptr++;
 8a6:	6d 01       	movw	r12, r26
                    ch = *ptr;
 8a8:	ed 91       	ld	r30, X+
            ptr++;
            ch = *ptr;
            if((ch>=0x30) && (ch<=0x39))
            {
                v_numOfDigitsToDisp_u8 = 0;
                while((ch>=0x30) && (ch<=0x39))
 8aa:	80 ed       	ldi	r24, 0xD0	; 208
 8ac:	8e 0f       	add	r24, r30
 8ae:	8a 30       	cpi	r24, 0x0A	; 10
 8b0:	88 f3       	brcs	.-30     	; 0x894 <OLED_Printf+0x68>
            {
                v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
            }
            
            
            switch(ch)       /* Decode the type of the argument */
 8b2:	8e 2f       	mov	r24, r30
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	fc 01       	movw	r30, r24
 8b8:	b5 97       	sbiw	r30, 0x25	; 37
 8ba:	e4 35       	cpi	r30, 0x54	; 84
 8bc:	f1 05       	cpc	r31, r1
 8be:	08 f0       	brcs	.+2      	; 0x8c2 <OLED_Printf+0x96>
 8c0:	b9 c0       	rjmp	.+370    	; 0xa34 <__stack+0x135>
 8c2:	e6 5a       	subi	r30, 0xA6	; 166
 8c4:	ff 4f       	sbci	r31, 0xFF	; 255
 8c6:	0c 94 03 07 	jmp	0xe06	; 0xe06 <__tablejump2__>
            {
                case 'C':
                case 'c':     /* Argument type is of char, hence read char data from the argp */
                    ch = va_arg(argp, int);
 8ca:	47 01       	movw	r8, r14
 8cc:	b2 e0       	ldi	r27, 0x02	; 2
 8ce:	8b 0e       	add	r8, r27
 8d0:	91 1c       	adc	r9, r1
                    OLED_DisplayChar(ch);
 8d2:	f7 01       	movw	r30, r14
 8d4:	80 81       	ld	r24, Z
 8d6:	0e 94 ee 02 	call	0x5dc	; 0x5dc <OLED_DisplayChar>
            
            switch(ch)       /* Decode the type of the argument */
            {
                case 'C':
                case 'c':     /* Argument type is of char, hence read char data from the argp */
                    ch = va_arg(argp, int);
 8da:	74 01       	movw	r14, r8
                    OLED_DisplayChar(ch);
                    break;
 8dc:	ab c0       	rjmp	.+342    	; 0xa34 <__stack+0x135>
                    ch = *ptr;
                }
            }
            else
            {
                v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
 8de:	1b 2d       	mov	r17, r11
                    ch = va_arg(argp, int);
                    OLED_DisplayChar(ch);
                    break;
                    
                case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
                    v_num_s16 = va_arg(argp, int);
 8e0:	f7 01       	movw	r30, r14
 8e2:	80 80       	ld	r8, Z
 8e4:	91 80       	ldd	r9, Z+1	; 0x01
 8e6:	f2 e0       	ldi	r31, 0x02	; 2
 8e8:	ef 0e       	add	r14, r31
 8ea:	f1 1c       	adc	r15, r1
                    if(v_num_s16<0)
 8ec:	99 20       	and	r9, r9
 8ee:	34 f4       	brge	.+12     	; 0x8fc <OLED_Printf+0xd0>
                    { /* If the number is -ve then display the 2's complement along with '-' sign */
                        v_num_s16 = -v_num_s16;
 8f0:	91 94       	neg	r9
 8f2:	81 94       	neg	r8
 8f4:	91 08       	sbc	r9, r1
                        OLED_DisplayChar('-');
 8f6:	8d e2       	ldi	r24, 0x2D	; 45
 8f8:	0e 94 ee 02 	call	0x5dc	; 0x5dc <OLED_DisplayChar>
                    }
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_s16,v_numOfDigitsToDisp_u8);
 8fc:	a4 01       	movw	r20, r8
 8fe:	99 0c       	add	r9, r9
 900:	66 0b       	sbc	r22, r22
 902:	77 0b       	sbc	r23, r23
 904:	21 2f       	mov	r18, r17
 906:	8a e0       	ldi	r24, 0x0A	; 10
 908:	0e 94 35 03 	call	0x66a	; 0x66a <OLED_DisplayNumber>
                    break;
 90c:	93 c0       	rjmp	.+294    	; 0xa34 <__stack+0x135>
                    ch = *ptr;
                }
            }
            else
            {
                v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
 90e:	1b 2d       	mov	r17, r11
                    }
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_s16,v_numOfDigitsToDisp_u8);
                    break;
                    
                case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
                    v_num_s32 = va_arg(argp, sint32_t);
 910:	f7 01       	movw	r30, r14
 912:	40 80       	ld	r4, Z
 914:	51 80       	ldd	r5, Z+1	; 0x01
 916:	62 80       	ldd	r6, Z+2	; 0x02
 918:	73 80       	ldd	r7, Z+3	; 0x03
 91a:	24 e0       	ldi	r18, 0x04	; 4
 91c:	e2 0e       	add	r14, r18
 91e:	f1 1c       	adc	r15, r1
                    if(v_num_s32<0)
 920:	77 20       	and	r7, r7
 922:	5c f4       	brge	.+22     	; 0x93a <__stack+0x3b>
                    { /* If the number is -ve then display the 2's complement along with '-' sign */
                        v_num_s32 = -v_num_s32;
 924:	70 94       	com	r7
 926:	60 94       	com	r6
 928:	50 94       	com	r5
 92a:	40 94       	com	r4
 92c:	41 1c       	adc	r4, r1
 92e:	51 1c       	adc	r5, r1
 930:	61 1c       	adc	r6, r1
 932:	71 1c       	adc	r7, r1
                        OLED_DisplayChar('-');
 934:	8d e2       	ldi	r24, 0x2D	; 45
 936:	0e 94 ee 02 	call	0x5dc	; 0x5dc <OLED_DisplayChar>
                    }
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_s32,v_numOfDigitsToDisp_u8);
 93a:	21 2f       	mov	r18, r17
 93c:	b3 01       	movw	r22, r6
 93e:	a2 01       	movw	r20, r4
 940:	8a e0       	ldi	r24, 0x0A	; 10
 942:	0e 94 35 03 	call	0x66a	; 0x66a <OLED_DisplayNumber>
                    break;
 946:	76 c0       	rjmp	.+236    	; 0xa34 <__stack+0x135>
                    ch = *ptr;
                }
            }
            else
            {
                v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
 948:	1b 2d       	mov	r17, r11
                    }
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_s32,v_numOfDigitsToDisp_u8);
                    break;
                    
                case 'u':    /* Argument type is of unsigned integer, hence read 16bit unsigned data */
                    v_num_u16 = va_arg(argp, int);
 94a:	f7 01       	movw	r30, r14
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_u16,v_numOfDigitsToDisp_u8);
 94c:	40 81       	ld	r20, Z
 94e:	51 81       	ldd	r21, Z+1	; 0x01
 950:	82 e0       	ldi	r24, 0x02	; 2
 952:	e8 0e       	add	r14, r24
 954:	f1 1c       	adc	r15, r1
 956:	60 e0       	ldi	r22, 0x00	; 0
 958:	70 e0       	ldi	r23, 0x00	; 0
 95a:	21 2f       	mov	r18, r17
 95c:	8a e0       	ldi	r24, 0x0A	; 10
 95e:	0e 94 35 03 	call	0x66a	; 0x66a <OLED_DisplayNumber>
                    break;
 962:	68 c0       	rjmp	.+208    	; 0xa34 <__stack+0x135>
                    ch = *ptr;
                }
            }
            else
            {
                v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
 964:	1b 2d       	mov	r17, r11
                    v_num_u16 = va_arg(argp, int);
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                    break;
                    
                case 'U':    /* Argument type is of integer, hence read 32bit unsigend data */
                    v_num_u32 = va_arg(argp, uint32_t);
 966:	f7 01       	movw	r30, r14
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_u32,v_numOfDigitsToDisp_u8);
 968:	40 81       	ld	r20, Z
 96a:	51 81       	ldd	r21, Z+1	; 0x01
 96c:	62 81       	ldd	r22, Z+2	; 0x02
 96e:	73 81       	ldd	r23, Z+3	; 0x03
 970:	a4 e0       	ldi	r26, 0x04	; 4
 972:	ea 0e       	add	r14, r26
 974:	f1 1c       	adc	r15, r1
 976:	21 2f       	mov	r18, r17
 978:	8a e0       	ldi	r24, 0x0A	; 10
 97a:	0e 94 35 03 	call	0x66a	; 0x66a <OLED_DisplayNumber>
                    break;
 97e:	5a c0       	rjmp	.+180    	; 0xa34 <__stack+0x135>
                    ch = *ptr;
                }
            }
            else
            {
                v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
 980:	1b 2d       	mov	r17, r11
                    v_num_u32 = va_arg(argp, uint32_t);
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_u32,v_numOfDigitsToDisp_u8);
                    break;
                    
                case 'x':  /* Argument type is of hex, hence hexadecimal data from the argp */
                    v_num_u16 = va_arg(argp, int);
 982:	f7 01       	movw	r30, r14
                    OLED_DisplayNumber(C_HEX_U8,v_num_u16,v_numOfDigitsToDisp_u8);
 984:	40 81       	ld	r20, Z
 986:	51 81       	ldd	r21, Z+1	; 0x01
 988:	b2 e0       	ldi	r27, 0x02	; 2
 98a:	eb 0e       	add	r14, r27
 98c:	f1 1c       	adc	r15, r1
 98e:	60 e0       	ldi	r22, 0x00	; 0
 990:	70 e0       	ldi	r23, 0x00	; 0
 992:	21 2f       	mov	r18, r17
 994:	8a 2d       	mov	r24, r10
 996:	0e 94 35 03 	call	0x66a	; 0x66a <OLED_DisplayNumber>
                    break;
 99a:	4c c0       	rjmp	.+152    	; 0xa34 <__stack+0x135>
                    ch = *ptr;
                }
            }
            else
            {
                v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
 99c:	1b 2d       	mov	r17, r11
                    v_num_u16 = va_arg(argp, int);
                    OLED_DisplayNumber(C_HEX_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                    break;
                    
                case 'X':  /* Argument type is of hex, hence hexadecimal data from the argp */
                    v_num_u32 = va_arg(argp, uint32_t);
 99e:	f7 01       	movw	r30, r14
                    OLED_DisplayNumber(C_HEX_U8,v_num_u32,v_numOfDigitsToDisp_u8);
 9a0:	40 81       	ld	r20, Z
 9a2:	51 81       	ldd	r21, Z+1	; 0x01
 9a4:	62 81       	ldd	r22, Z+2	; 0x02
 9a6:	73 81       	ldd	r23, Z+3	; 0x03
 9a8:	e4 e0       	ldi	r30, 0x04	; 4
 9aa:	ee 0e       	add	r14, r30
 9ac:	f1 1c       	adc	r15, r1
 9ae:	21 2f       	mov	r18, r17
 9b0:	8a 2d       	mov	r24, r10
 9b2:	0e 94 35 03 	call	0x66a	; 0x66a <OLED_DisplayNumber>
                    break;
 9b6:	3e c0       	rjmp	.+124    	; 0xa34 <__stack+0x135>
                    ch = *ptr;
                }
            }
            else
            {
                v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
 9b8:	1b 2d       	mov	r17, r11
                    OLED_DisplayNumber(C_HEX_U8,v_num_u32,v_numOfDigitsToDisp_u8);
                    break;
                    
                    
                case 'b':  /* Argument type is of binary,Read int and convert to binary */
                    v_num_u16 = va_arg(argp, int);
 9ba:	f7 01       	movw	r30, r14
 9bc:	40 81       	ld	r20, Z
 9be:	51 81       	ldd	r21, Z+1	; 0x01
 9c0:	f2 e0       	ldi	r31, 0x02	; 2
 9c2:	ef 0e       	add	r14, r31
 9c4:	f1 1c       	adc	r15, r1
                    if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
 9c6:	1f 3f       	cpi	r17, 0xFF	; 255
 9c8:	09 f4       	brne	.+2      	; 0x9cc <__stack+0xcd>
                        v_numOfDigitsToDisp_u8 = 16;
 9ca:	1a 2d       	mov	r17, r10
                    OLED_DisplayNumber(C_BINARY_U8,v_num_u16,v_numOfDigitsToDisp_u8);
 9cc:	60 e0       	ldi	r22, 0x00	; 0
 9ce:	70 e0       	ldi	r23, 0x00	; 0
 9d0:	21 2f       	mov	r18, r17
 9d2:	82 e0       	ldi	r24, 0x02	; 2
 9d4:	0e 94 35 03 	call	0x66a	; 0x66a <OLED_DisplayNumber>
                    break;
 9d8:	2d c0       	rjmp	.+90     	; 0xa34 <__stack+0x135>
                    
                case 'B':  /* Argument type is of binary,Read int and convert to binary */
                    v_num_u32 = va_arg(argp, uint32_t);
 9da:	f7 01       	movw	r30, r14
 9dc:	40 81       	ld	r20, Z
 9de:	51 81       	ldd	r21, Z+1	; 0x01
 9e0:	62 81       	ldd	r22, Z+2	; 0x02
 9e2:	73 81       	ldd	r23, Z+3	; 0x03
 9e4:	24 e0       	ldi	r18, 0x04	; 4
 9e6:	e2 0e       	add	r14, r18
 9e8:	f1 1c       	adc	r15, r1
                    if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
 9ea:	1f 3f       	cpi	r17, 0xFF	; 255
 9ec:	09 f4       	brne	.+2      	; 0x9f0 <__stack+0xf1>
                        v_numOfDigitsToDisp_u8 = 16;
 9ee:	1a 2d       	mov	r17, r10
                    OLED_DisplayNumber(C_BINARY_U8,v_num_u32,v_numOfDigitsToDisp_u8);
 9f0:	21 2f       	mov	r18, r17
 9f2:	82 e0       	ldi	r24, 0x02	; 2
 9f4:	0e 94 35 03 	call	0x66a	; 0x66a <OLED_DisplayNumber>
                    break;
 9f8:	1d c0       	rjmp	.+58     	; 0xa34 <__stack+0x135>
                    
                    
                case 'F':
                case 'f': /* Argument type is of float, hence read double data from the argp */
#if (Enable_OLED_DisplayFloatNumber == 1)
                    v_floatNum_f32 = va_arg(argp, double);
 9fa:	f7 01       	movw	r30, r14
                    OLED_DisplayFloatNumber(v_floatNum_f32);
 9fc:	60 81       	ld	r22, Z
 9fe:	71 81       	ldd	r23, Z+1	; 0x01
 a00:	82 81       	ldd	r24, Z+2	; 0x02
 a02:	93 81       	ldd	r25, Z+3	; 0x03
 a04:	a4 e0       	ldi	r26, 0x04	; 4
 a06:	ea 0e       	add	r14, r26
 a08:	f1 1c       	adc	r15, r1
 a0a:	0e 94 de 03 	call	0x7bc	; 0x7bc <OLED_DisplayFloatNumber>
#endif
                    break;
 a0e:	12 c0       	rjmp	.+36     	; 0xa34 <__stack+0x135>
                    
                    
                case 'S':
                case 's': /* Argument type is of string, hence get the pointer to sting passed */
                    str = va_arg(argp, char *);
 a10:	47 01       	movw	r8, r14
 a12:	b2 e0       	ldi	r27, 0x02	; 2
 a14:	8b 0e       	add	r8, r27
 a16:	91 1c       	adc	r9, r1
                    OLED_DisplayString(str);
 a18:	f7 01       	movw	r30, r14
 a1a:	80 81       	ld	r24, Z
 a1c:	91 81       	ldd	r25, Z+1	; 0x01
 a1e:	0e 94 26 03 	call	0x64c	; 0x64c <OLED_DisplayString>
                    break;
                    
                    
                case 'S':
                case 's': /* Argument type is of string, hence get the pointer to sting passed */
                    str = va_arg(argp, char *);
 a22:	74 01       	movw	r14, r8
                    OLED_DisplayString(str);
                    break;
 a24:	07 c0       	rjmp	.+14     	; 0xa34 <__stack+0x135>
                    
                case '%':
                    OLED_DisplayChar('%');
 a26:	85 e2       	ldi	r24, 0x25	; 37
 a28:	0e 94 ee 02 	call	0x5dc	; 0x5dc <OLED_DisplayChar>
                    break;
 a2c:	03 c0       	rjmp	.+6      	; 0xa34 <__stack+0x135>
            }
        }
        else
        {
            /* As '%' is not detected display/transmit the char passed */
            OLED_DisplayChar(ch);
 a2e:	0e 94 ee 02 	call	0x5dc	; 0x5dc <OLED_DisplayChar>
 a32:	64 01       	movw	r12, r8
#endif
    
    va_start(argp, argList);
    
    /* Loop through the list to extract all the input arguments */
    for(ptr = argList; *ptr != '\0'; ptr++)
 a34:	46 01       	movw	r8, r12
 a36:	ff ef       	ldi	r31, 0xFF	; 255
 a38:	8f 1a       	sub	r8, r31
 a3a:	9f 0a       	sbc	r9, r31
 a3c:	d6 01       	movw	r26, r12
 a3e:	11 96       	adiw	r26, 0x01	; 1
 a40:	8c 91       	ld	r24, X
 a42:	81 11       	cpse	r24, r1
 a44:	15 cf       	rjmp	.-470    	; 0x870 <OLED_Printf+0x44>
 a46:	15 c0       	rjmp	.+42     	; 0xa72 <__stack+0x173>
                        v_numOfDigitsToDisp_u8 = 16;
                    OLED_DisplayNumber(C_BINARY_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                    break;
                    
                case 'B':  /* Argument type is of binary,Read int and convert to binary */
                    v_num_u32 = va_arg(argp, uint32_t);
 a48:	f7 01       	movw	r30, r14
 a4a:	40 81       	ld	r20, Z
 a4c:	51 81       	ldd	r21, Z+1	; 0x01
 a4e:	62 81       	ldd	r22, Z+2	; 0x02
 a50:	73 81       	ldd	r23, Z+3	; 0x03
 a52:	b4 e0       	ldi	r27, 0x04	; 4
 a54:	eb 0e       	add	r14, r27
 a56:	f1 1c       	adc	r15, r1
                    if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
                        v_numOfDigitsToDisp_u8 = 16;
 a58:	1a 2d       	mov	r17, r10
 a5a:	ca cf       	rjmp	.-108    	; 0x9f0 <__stack+0xf1>
            {
                v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
            }
            
            
            switch(ch)       /* Decode the type of the argument */
 a5c:	8e 2f       	mov	r24, r30
 a5e:	90 e0       	ldi	r25, 0x00	; 0
 a60:	fc 01       	movw	r30, r24
 a62:	b5 97       	sbiw	r30, 0x25	; 37
 a64:	e4 35       	cpi	r30, 0x54	; 84
 a66:	f1 05       	cpc	r31, r1
 a68:	28 f7       	brcc	.-54     	; 0xa34 <__stack+0x135>
 a6a:	e2 55       	subi	r30, 0x52	; 82
 a6c:	ff 4f       	sbci	r31, 0xFF	; 255
 a6e:	0c 94 03 07 	jmp	0xe06	; 0xe06 <__tablejump2__>
            OLED_DisplayChar(ch);
        }
    }
    
    va_end(argp);
}
 a72:	df 91       	pop	r29
 a74:	cf 91       	pop	r28
 a76:	1f 91       	pop	r17
 a78:	0f 91       	pop	r16
 a7a:	ff 90       	pop	r15
 a7c:	ef 90       	pop	r14
 a7e:	df 90       	pop	r13
 a80:	cf 90       	pop	r12
 a82:	bf 90       	pop	r11
 a84:	af 90       	pop	r10
 a86:	9f 90       	pop	r9
 a88:	8f 90       	pop	r8
 a8a:	7f 90       	pop	r7
 a8c:	6f 90       	pop	r6
 a8e:	5f 90       	pop	r5
 a90:	4f 90       	pop	r4
 a92:	08 95       	ret

00000a94 <__subsf3>:
 a94:	50 58       	subi	r21, 0x80	; 128

00000a96 <__addsf3>:
 a96:	bb 27       	eor	r27, r27
 a98:	aa 27       	eor	r26, r26
 a9a:	0e 94 62 05 	call	0xac4	; 0xac4 <__addsf3x>
 a9e:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <__fp_round>
 aa2:	0e 94 2c 06 	call	0xc58	; 0xc58 <__fp_pscA>
 aa6:	38 f0       	brcs	.+14     	; 0xab6 <__addsf3+0x20>
 aa8:	0e 94 33 06 	call	0xc66	; 0xc66 <__fp_pscB>
 aac:	20 f0       	brcs	.+8      	; 0xab6 <__addsf3+0x20>
 aae:	39 f4       	brne	.+14     	; 0xabe <__addsf3+0x28>
 ab0:	9f 3f       	cpi	r25, 0xFF	; 255
 ab2:	19 f4       	brne	.+6      	; 0xaba <__addsf3+0x24>
 ab4:	26 f4       	brtc	.+8      	; 0xabe <__addsf3+0x28>
 ab6:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__fp_nan>
 aba:	0e f4       	brtc	.+2      	; 0xabe <__addsf3+0x28>
 abc:	e0 95       	com	r30
 abe:	e7 fb       	bst	r30, 7
 ac0:	0c 94 23 06 	jmp	0xc46	; 0xc46 <__fp_inf>

00000ac4 <__addsf3x>:
 ac4:	e9 2f       	mov	r30, r25
 ac6:	0e 94 4b 06 	call	0xc96	; 0xc96 <__fp_split3>
 aca:	58 f3       	brcs	.-42     	; 0xaa2 <__addsf3+0xc>
 acc:	ba 17       	cp	r27, r26
 ace:	62 07       	cpc	r22, r18
 ad0:	73 07       	cpc	r23, r19
 ad2:	84 07       	cpc	r24, r20
 ad4:	95 07       	cpc	r25, r21
 ad6:	20 f0       	brcs	.+8      	; 0xae0 <__addsf3x+0x1c>
 ad8:	79 f4       	brne	.+30     	; 0xaf8 <__addsf3x+0x34>
 ada:	a6 f5       	brtc	.+104    	; 0xb44 <__addsf3x+0x80>
 adc:	0c 94 6d 06 	jmp	0xcda	; 0xcda <__fp_zero>
 ae0:	0e f4       	brtc	.+2      	; 0xae4 <__addsf3x+0x20>
 ae2:	e0 95       	com	r30
 ae4:	0b 2e       	mov	r0, r27
 ae6:	ba 2f       	mov	r27, r26
 ae8:	a0 2d       	mov	r26, r0
 aea:	0b 01       	movw	r0, r22
 aec:	b9 01       	movw	r22, r18
 aee:	90 01       	movw	r18, r0
 af0:	0c 01       	movw	r0, r24
 af2:	ca 01       	movw	r24, r20
 af4:	a0 01       	movw	r20, r0
 af6:	11 24       	eor	r1, r1
 af8:	ff 27       	eor	r31, r31
 afa:	59 1b       	sub	r21, r25
 afc:	99 f0       	breq	.+38     	; 0xb24 <__addsf3x+0x60>
 afe:	59 3f       	cpi	r21, 0xF9	; 249
 b00:	50 f4       	brcc	.+20     	; 0xb16 <__addsf3x+0x52>
 b02:	50 3e       	cpi	r21, 0xE0	; 224
 b04:	68 f1       	brcs	.+90     	; 0xb60 <__addsf3x+0x9c>
 b06:	1a 16       	cp	r1, r26
 b08:	f0 40       	sbci	r31, 0x00	; 0
 b0a:	a2 2f       	mov	r26, r18
 b0c:	23 2f       	mov	r18, r19
 b0e:	34 2f       	mov	r19, r20
 b10:	44 27       	eor	r20, r20
 b12:	58 5f       	subi	r21, 0xF8	; 248
 b14:	f3 cf       	rjmp	.-26     	; 0xafc <__addsf3x+0x38>
 b16:	46 95       	lsr	r20
 b18:	37 95       	ror	r19
 b1a:	27 95       	ror	r18
 b1c:	a7 95       	ror	r26
 b1e:	f0 40       	sbci	r31, 0x00	; 0
 b20:	53 95       	inc	r21
 b22:	c9 f7       	brne	.-14     	; 0xb16 <__addsf3x+0x52>
 b24:	7e f4       	brtc	.+30     	; 0xb44 <__addsf3x+0x80>
 b26:	1f 16       	cp	r1, r31
 b28:	ba 0b       	sbc	r27, r26
 b2a:	62 0b       	sbc	r22, r18
 b2c:	73 0b       	sbc	r23, r19
 b2e:	84 0b       	sbc	r24, r20
 b30:	ba f0       	brmi	.+46     	; 0xb60 <__addsf3x+0x9c>
 b32:	91 50       	subi	r25, 0x01	; 1
 b34:	a1 f0       	breq	.+40     	; 0xb5e <__addsf3x+0x9a>
 b36:	ff 0f       	add	r31, r31
 b38:	bb 1f       	adc	r27, r27
 b3a:	66 1f       	adc	r22, r22
 b3c:	77 1f       	adc	r23, r23
 b3e:	88 1f       	adc	r24, r24
 b40:	c2 f7       	brpl	.-16     	; 0xb32 <__addsf3x+0x6e>
 b42:	0e c0       	rjmp	.+28     	; 0xb60 <__addsf3x+0x9c>
 b44:	ba 0f       	add	r27, r26
 b46:	62 1f       	adc	r22, r18
 b48:	73 1f       	adc	r23, r19
 b4a:	84 1f       	adc	r24, r20
 b4c:	48 f4       	brcc	.+18     	; 0xb60 <__addsf3x+0x9c>
 b4e:	87 95       	ror	r24
 b50:	77 95       	ror	r23
 b52:	67 95       	ror	r22
 b54:	b7 95       	ror	r27
 b56:	f7 95       	ror	r31
 b58:	9e 3f       	cpi	r25, 0xFE	; 254
 b5a:	08 f0       	brcs	.+2      	; 0xb5e <__addsf3x+0x9a>
 b5c:	b0 cf       	rjmp	.-160    	; 0xabe <__addsf3+0x28>
 b5e:	93 95       	inc	r25
 b60:	88 0f       	add	r24, r24
 b62:	08 f0       	brcs	.+2      	; 0xb66 <__addsf3x+0xa2>
 b64:	99 27       	eor	r25, r25
 b66:	ee 0f       	add	r30, r30
 b68:	97 95       	ror	r25
 b6a:	87 95       	ror	r24
 b6c:	08 95       	ret

00000b6e <__fixunssfsi>:
 b6e:	0e 94 53 06 	call	0xca6	; 0xca6 <__fp_splitA>
 b72:	88 f0       	brcs	.+34     	; 0xb96 <__fixunssfsi+0x28>
 b74:	9f 57       	subi	r25, 0x7F	; 127
 b76:	98 f0       	brcs	.+38     	; 0xb9e <__fixunssfsi+0x30>
 b78:	b9 2f       	mov	r27, r25
 b7a:	99 27       	eor	r25, r25
 b7c:	b7 51       	subi	r27, 0x17	; 23
 b7e:	b0 f0       	brcs	.+44     	; 0xbac <__fixunssfsi+0x3e>
 b80:	e1 f0       	breq	.+56     	; 0xbba <__fixunssfsi+0x4c>
 b82:	66 0f       	add	r22, r22
 b84:	77 1f       	adc	r23, r23
 b86:	88 1f       	adc	r24, r24
 b88:	99 1f       	adc	r25, r25
 b8a:	1a f0       	brmi	.+6      	; 0xb92 <__fixunssfsi+0x24>
 b8c:	ba 95       	dec	r27
 b8e:	c9 f7       	brne	.-14     	; 0xb82 <__fixunssfsi+0x14>
 b90:	14 c0       	rjmp	.+40     	; 0xbba <__fixunssfsi+0x4c>
 b92:	b1 30       	cpi	r27, 0x01	; 1
 b94:	91 f0       	breq	.+36     	; 0xbba <__fixunssfsi+0x4c>
 b96:	0e 94 6d 06 	call	0xcda	; 0xcda <__fp_zero>
 b9a:	b1 e0       	ldi	r27, 0x01	; 1
 b9c:	08 95       	ret
 b9e:	0c 94 6d 06 	jmp	0xcda	; 0xcda <__fp_zero>
 ba2:	67 2f       	mov	r22, r23
 ba4:	78 2f       	mov	r23, r24
 ba6:	88 27       	eor	r24, r24
 ba8:	b8 5f       	subi	r27, 0xF8	; 248
 baa:	39 f0       	breq	.+14     	; 0xbba <__fixunssfsi+0x4c>
 bac:	b9 3f       	cpi	r27, 0xF9	; 249
 bae:	cc f3       	brlt	.-14     	; 0xba2 <__fixunssfsi+0x34>
 bb0:	86 95       	lsr	r24
 bb2:	77 95       	ror	r23
 bb4:	67 95       	ror	r22
 bb6:	b3 95       	inc	r27
 bb8:	d9 f7       	brne	.-10     	; 0xbb0 <__fixunssfsi+0x42>
 bba:	3e f4       	brtc	.+14     	; 0xbca <__fixunssfsi+0x5c>
 bbc:	90 95       	com	r25
 bbe:	80 95       	com	r24
 bc0:	70 95       	com	r23
 bc2:	61 95       	neg	r22
 bc4:	7f 4f       	sbci	r23, 0xFF	; 255
 bc6:	8f 4f       	sbci	r24, 0xFF	; 255
 bc8:	9f 4f       	sbci	r25, 0xFF	; 255
 bca:	08 95       	ret

00000bcc <__floatunsisf>:
 bcc:	e8 94       	clt
 bce:	09 c0       	rjmp	.+18     	; 0xbe2 <__floatsisf+0x12>

00000bd0 <__floatsisf>:
 bd0:	97 fb       	bst	r25, 7
 bd2:	3e f4       	brtc	.+14     	; 0xbe2 <__floatsisf+0x12>
 bd4:	90 95       	com	r25
 bd6:	80 95       	com	r24
 bd8:	70 95       	com	r23
 bda:	61 95       	neg	r22
 bdc:	7f 4f       	sbci	r23, 0xFF	; 255
 bde:	8f 4f       	sbci	r24, 0xFF	; 255
 be0:	9f 4f       	sbci	r25, 0xFF	; 255
 be2:	99 23       	and	r25, r25
 be4:	a9 f0       	breq	.+42     	; 0xc10 <__floatsisf+0x40>
 be6:	f9 2f       	mov	r31, r25
 be8:	96 e9       	ldi	r25, 0x96	; 150
 bea:	bb 27       	eor	r27, r27
 bec:	93 95       	inc	r25
 bee:	f6 95       	lsr	r31
 bf0:	87 95       	ror	r24
 bf2:	77 95       	ror	r23
 bf4:	67 95       	ror	r22
 bf6:	b7 95       	ror	r27
 bf8:	f1 11       	cpse	r31, r1
 bfa:	f8 cf       	rjmp	.-16     	; 0xbec <__floatsisf+0x1c>
 bfc:	fa f4       	brpl	.+62     	; 0xc3c <__floatsisf+0x6c>
 bfe:	bb 0f       	add	r27, r27
 c00:	11 f4       	brne	.+4      	; 0xc06 <__floatsisf+0x36>
 c02:	60 ff       	sbrs	r22, 0
 c04:	1b c0       	rjmp	.+54     	; 0xc3c <__floatsisf+0x6c>
 c06:	6f 5f       	subi	r22, 0xFF	; 255
 c08:	7f 4f       	sbci	r23, 0xFF	; 255
 c0a:	8f 4f       	sbci	r24, 0xFF	; 255
 c0c:	9f 4f       	sbci	r25, 0xFF	; 255
 c0e:	16 c0       	rjmp	.+44     	; 0xc3c <__floatsisf+0x6c>
 c10:	88 23       	and	r24, r24
 c12:	11 f0       	breq	.+4      	; 0xc18 <__floatsisf+0x48>
 c14:	96 e9       	ldi	r25, 0x96	; 150
 c16:	11 c0       	rjmp	.+34     	; 0xc3a <__floatsisf+0x6a>
 c18:	77 23       	and	r23, r23
 c1a:	21 f0       	breq	.+8      	; 0xc24 <__floatsisf+0x54>
 c1c:	9e e8       	ldi	r25, 0x8E	; 142
 c1e:	87 2f       	mov	r24, r23
 c20:	76 2f       	mov	r23, r22
 c22:	05 c0       	rjmp	.+10     	; 0xc2e <__floatsisf+0x5e>
 c24:	66 23       	and	r22, r22
 c26:	71 f0       	breq	.+28     	; 0xc44 <__floatsisf+0x74>
 c28:	96 e8       	ldi	r25, 0x86	; 134
 c2a:	86 2f       	mov	r24, r22
 c2c:	70 e0       	ldi	r23, 0x00	; 0
 c2e:	60 e0       	ldi	r22, 0x00	; 0
 c30:	2a f0       	brmi	.+10     	; 0xc3c <__floatsisf+0x6c>
 c32:	9a 95       	dec	r25
 c34:	66 0f       	add	r22, r22
 c36:	77 1f       	adc	r23, r23
 c38:	88 1f       	adc	r24, r24
 c3a:	da f7       	brpl	.-10     	; 0xc32 <__floatsisf+0x62>
 c3c:	88 0f       	add	r24, r24
 c3e:	96 95       	lsr	r25
 c40:	87 95       	ror	r24
 c42:	97 f9       	bld	r25, 7
 c44:	08 95       	ret

00000c46 <__fp_inf>:
 c46:	97 f9       	bld	r25, 7
 c48:	9f 67       	ori	r25, 0x7F	; 127
 c4a:	80 e8       	ldi	r24, 0x80	; 128
 c4c:	70 e0       	ldi	r23, 0x00	; 0
 c4e:	60 e0       	ldi	r22, 0x00	; 0
 c50:	08 95       	ret

00000c52 <__fp_nan>:
 c52:	9f ef       	ldi	r25, 0xFF	; 255
 c54:	80 ec       	ldi	r24, 0xC0	; 192
 c56:	08 95       	ret

00000c58 <__fp_pscA>:
 c58:	00 24       	eor	r0, r0
 c5a:	0a 94       	dec	r0
 c5c:	16 16       	cp	r1, r22
 c5e:	17 06       	cpc	r1, r23
 c60:	18 06       	cpc	r1, r24
 c62:	09 06       	cpc	r0, r25
 c64:	08 95       	ret

00000c66 <__fp_pscB>:
 c66:	00 24       	eor	r0, r0
 c68:	0a 94       	dec	r0
 c6a:	12 16       	cp	r1, r18
 c6c:	13 06       	cpc	r1, r19
 c6e:	14 06       	cpc	r1, r20
 c70:	05 06       	cpc	r0, r21
 c72:	08 95       	ret

00000c74 <__fp_round>:
 c74:	09 2e       	mov	r0, r25
 c76:	03 94       	inc	r0
 c78:	00 0c       	add	r0, r0
 c7a:	11 f4       	brne	.+4      	; 0xc80 <__fp_round+0xc>
 c7c:	88 23       	and	r24, r24
 c7e:	52 f0       	brmi	.+20     	; 0xc94 <__fp_round+0x20>
 c80:	bb 0f       	add	r27, r27
 c82:	40 f4       	brcc	.+16     	; 0xc94 <__fp_round+0x20>
 c84:	bf 2b       	or	r27, r31
 c86:	11 f4       	brne	.+4      	; 0xc8c <__fp_round+0x18>
 c88:	60 ff       	sbrs	r22, 0
 c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__fp_round+0x20>
 c8c:	6f 5f       	subi	r22, 0xFF	; 255
 c8e:	7f 4f       	sbci	r23, 0xFF	; 255
 c90:	8f 4f       	sbci	r24, 0xFF	; 255
 c92:	9f 4f       	sbci	r25, 0xFF	; 255
 c94:	08 95       	ret

00000c96 <__fp_split3>:
 c96:	57 fd       	sbrc	r21, 7
 c98:	90 58       	subi	r25, 0x80	; 128
 c9a:	44 0f       	add	r20, r20
 c9c:	55 1f       	adc	r21, r21
 c9e:	59 f0       	breq	.+22     	; 0xcb6 <__fp_splitA+0x10>
 ca0:	5f 3f       	cpi	r21, 0xFF	; 255
 ca2:	71 f0       	breq	.+28     	; 0xcc0 <__fp_splitA+0x1a>
 ca4:	47 95       	ror	r20

00000ca6 <__fp_splitA>:
 ca6:	88 0f       	add	r24, r24
 ca8:	97 fb       	bst	r25, 7
 caa:	99 1f       	adc	r25, r25
 cac:	61 f0       	breq	.+24     	; 0xcc6 <__fp_splitA+0x20>
 cae:	9f 3f       	cpi	r25, 0xFF	; 255
 cb0:	79 f0       	breq	.+30     	; 0xcd0 <__fp_splitA+0x2a>
 cb2:	87 95       	ror	r24
 cb4:	08 95       	ret
 cb6:	12 16       	cp	r1, r18
 cb8:	13 06       	cpc	r1, r19
 cba:	14 06       	cpc	r1, r20
 cbc:	55 1f       	adc	r21, r21
 cbe:	f2 cf       	rjmp	.-28     	; 0xca4 <__fp_split3+0xe>
 cc0:	46 95       	lsr	r20
 cc2:	f1 df       	rcall	.-30     	; 0xca6 <__fp_splitA>
 cc4:	08 c0       	rjmp	.+16     	; 0xcd6 <__fp_splitA+0x30>
 cc6:	16 16       	cp	r1, r22
 cc8:	17 06       	cpc	r1, r23
 cca:	18 06       	cpc	r1, r24
 ccc:	99 1f       	adc	r25, r25
 cce:	f1 cf       	rjmp	.-30     	; 0xcb2 <__fp_splitA+0xc>
 cd0:	86 95       	lsr	r24
 cd2:	71 05       	cpc	r23, r1
 cd4:	61 05       	cpc	r22, r1
 cd6:	08 94       	sec
 cd8:	08 95       	ret

00000cda <__fp_zero>:
 cda:	e8 94       	clt

00000cdc <__fp_szero>:
 cdc:	bb 27       	eor	r27, r27
 cde:	66 27       	eor	r22, r22
 ce0:	77 27       	eor	r23, r23
 ce2:	cb 01       	movw	r24, r22
 ce4:	97 f9       	bld	r25, 7
 ce6:	08 95       	ret

00000ce8 <__mulsf3>:
 ce8:	0e 94 87 06 	call	0xd0e	; 0xd0e <__mulsf3x>
 cec:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <__fp_round>
 cf0:	0e 94 2c 06 	call	0xc58	; 0xc58 <__fp_pscA>
 cf4:	38 f0       	brcs	.+14     	; 0xd04 <__mulsf3+0x1c>
 cf6:	0e 94 33 06 	call	0xc66	; 0xc66 <__fp_pscB>
 cfa:	20 f0       	brcs	.+8      	; 0xd04 <__mulsf3+0x1c>
 cfc:	95 23       	and	r25, r21
 cfe:	11 f0       	breq	.+4      	; 0xd04 <__mulsf3+0x1c>
 d00:	0c 94 23 06 	jmp	0xc46	; 0xc46 <__fp_inf>
 d04:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__fp_nan>
 d08:	11 24       	eor	r1, r1
 d0a:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <__fp_szero>

00000d0e <__mulsf3x>:
 d0e:	0e 94 4b 06 	call	0xc96	; 0xc96 <__fp_split3>
 d12:	70 f3       	brcs	.-36     	; 0xcf0 <__mulsf3+0x8>

00000d14 <__mulsf3_pse>:
 d14:	95 9f       	mul	r25, r21
 d16:	c1 f3       	breq	.-16     	; 0xd08 <__mulsf3+0x20>
 d18:	95 0f       	add	r25, r21
 d1a:	50 e0       	ldi	r21, 0x00	; 0
 d1c:	55 1f       	adc	r21, r21
 d1e:	62 9f       	mul	r22, r18
 d20:	f0 01       	movw	r30, r0
 d22:	72 9f       	mul	r23, r18
 d24:	bb 27       	eor	r27, r27
 d26:	f0 0d       	add	r31, r0
 d28:	b1 1d       	adc	r27, r1
 d2a:	63 9f       	mul	r22, r19
 d2c:	aa 27       	eor	r26, r26
 d2e:	f0 0d       	add	r31, r0
 d30:	b1 1d       	adc	r27, r1
 d32:	aa 1f       	adc	r26, r26
 d34:	64 9f       	mul	r22, r20
 d36:	66 27       	eor	r22, r22
 d38:	b0 0d       	add	r27, r0
 d3a:	a1 1d       	adc	r26, r1
 d3c:	66 1f       	adc	r22, r22
 d3e:	82 9f       	mul	r24, r18
 d40:	22 27       	eor	r18, r18
 d42:	b0 0d       	add	r27, r0
 d44:	a1 1d       	adc	r26, r1
 d46:	62 1f       	adc	r22, r18
 d48:	73 9f       	mul	r23, r19
 d4a:	b0 0d       	add	r27, r0
 d4c:	a1 1d       	adc	r26, r1
 d4e:	62 1f       	adc	r22, r18
 d50:	83 9f       	mul	r24, r19
 d52:	a0 0d       	add	r26, r0
 d54:	61 1d       	adc	r22, r1
 d56:	22 1f       	adc	r18, r18
 d58:	74 9f       	mul	r23, r20
 d5a:	33 27       	eor	r19, r19
 d5c:	a0 0d       	add	r26, r0
 d5e:	61 1d       	adc	r22, r1
 d60:	23 1f       	adc	r18, r19
 d62:	84 9f       	mul	r24, r20
 d64:	60 0d       	add	r22, r0
 d66:	21 1d       	adc	r18, r1
 d68:	82 2f       	mov	r24, r18
 d6a:	76 2f       	mov	r23, r22
 d6c:	6a 2f       	mov	r22, r26
 d6e:	11 24       	eor	r1, r1
 d70:	9f 57       	subi	r25, 0x7F	; 127
 d72:	50 40       	sbci	r21, 0x00	; 0
 d74:	9a f0       	brmi	.+38     	; 0xd9c <__mulsf3_pse+0x88>
 d76:	f1 f0       	breq	.+60     	; 0xdb4 <__mulsf3_pse+0xa0>
 d78:	88 23       	and	r24, r24
 d7a:	4a f0       	brmi	.+18     	; 0xd8e <__mulsf3_pse+0x7a>
 d7c:	ee 0f       	add	r30, r30
 d7e:	ff 1f       	adc	r31, r31
 d80:	bb 1f       	adc	r27, r27
 d82:	66 1f       	adc	r22, r22
 d84:	77 1f       	adc	r23, r23
 d86:	88 1f       	adc	r24, r24
 d88:	91 50       	subi	r25, 0x01	; 1
 d8a:	50 40       	sbci	r21, 0x00	; 0
 d8c:	a9 f7       	brne	.-22     	; 0xd78 <__mulsf3_pse+0x64>
 d8e:	9e 3f       	cpi	r25, 0xFE	; 254
 d90:	51 05       	cpc	r21, r1
 d92:	80 f0       	brcs	.+32     	; 0xdb4 <__mulsf3_pse+0xa0>
 d94:	0c 94 23 06 	jmp	0xc46	; 0xc46 <__fp_inf>
 d98:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <__fp_szero>
 d9c:	5f 3f       	cpi	r21, 0xFF	; 255
 d9e:	e4 f3       	brlt	.-8      	; 0xd98 <__mulsf3_pse+0x84>
 da0:	98 3e       	cpi	r25, 0xE8	; 232
 da2:	d4 f3       	brlt	.-12     	; 0xd98 <__mulsf3_pse+0x84>
 da4:	86 95       	lsr	r24
 da6:	77 95       	ror	r23
 da8:	67 95       	ror	r22
 daa:	b7 95       	ror	r27
 dac:	f7 95       	ror	r31
 dae:	e7 95       	ror	r30
 db0:	9f 5f       	subi	r25, 0xFF	; 255
 db2:	c1 f7       	brne	.-16     	; 0xda4 <__mulsf3_pse+0x90>
 db4:	fe 2b       	or	r31, r30
 db6:	88 0f       	add	r24, r24
 db8:	91 1d       	adc	r25, r1
 dba:	96 95       	lsr	r25
 dbc:	87 95       	ror	r24
 dbe:	97 f9       	bld	r25, 7
 dc0:	08 95       	ret

00000dc2 <__udivmodsi4>:
 dc2:	a1 e2       	ldi	r26, 0x21	; 33
 dc4:	1a 2e       	mov	r1, r26
 dc6:	aa 1b       	sub	r26, r26
 dc8:	bb 1b       	sub	r27, r27
 dca:	fd 01       	movw	r30, r26
 dcc:	0d c0       	rjmp	.+26     	; 0xde8 <__udivmodsi4_ep>

00000dce <__udivmodsi4_loop>:
 dce:	aa 1f       	adc	r26, r26
 dd0:	bb 1f       	adc	r27, r27
 dd2:	ee 1f       	adc	r30, r30
 dd4:	ff 1f       	adc	r31, r31
 dd6:	a2 17       	cp	r26, r18
 dd8:	b3 07       	cpc	r27, r19
 dda:	e4 07       	cpc	r30, r20
 ddc:	f5 07       	cpc	r31, r21
 dde:	20 f0       	brcs	.+8      	; 0xde8 <__udivmodsi4_ep>
 de0:	a2 1b       	sub	r26, r18
 de2:	b3 0b       	sbc	r27, r19
 de4:	e4 0b       	sbc	r30, r20
 de6:	f5 0b       	sbc	r31, r21

00000de8 <__udivmodsi4_ep>:
 de8:	66 1f       	adc	r22, r22
 dea:	77 1f       	adc	r23, r23
 dec:	88 1f       	adc	r24, r24
 dee:	99 1f       	adc	r25, r25
 df0:	1a 94       	dec	r1
 df2:	69 f7       	brne	.-38     	; 0xdce <__udivmodsi4_loop>
 df4:	60 95       	com	r22
 df6:	70 95       	com	r23
 df8:	80 95       	com	r24
 dfa:	90 95       	com	r25
 dfc:	9b 01       	movw	r18, r22
 dfe:	ac 01       	movw	r20, r24
 e00:	bd 01       	movw	r22, r26
 e02:	cf 01       	movw	r24, r30
 e04:	08 95       	ret

00000e06 <__tablejump2__>:
 e06:	ee 0f       	add	r30, r30
 e08:	ff 1f       	adc	r31, r31
 e0a:	05 90       	lpm	r0, Z+
 e0c:	f4 91       	lpm	r31, Z
 e0e:	e0 2d       	mov	r30, r0
 e10:	09 94       	ijmp

00000e12 <_exit>:
 e12:	f8 94       	cli

00000e14 <__stop_program>:
 e14:	ff cf       	rjmp	.-2      	; 0xe14 <__stop_program>
